package org.huberb.localenb;

import java.awt.Component;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectStreamException;
import java.util.Locale;
import java.util.prefs.Preferences;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import org.huberb.localenb.helper.LocaleComboBoxModel;
import org.huberb.localenb.options.LocaleOption;
import org.huberb.localenb.ui.FormatCommandInterface;
import org.huberb.localenb.ui.LocaleDatePanel;
import org.huberb.localenb.ui.LocaleMessagePanel;
import org.huberb.localenb.ui.LocaleNumberPanel;
import org.openide.ErrorManager;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;
import org.openide.util.io.NbMarshalledObject;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the <code>LocalePanel</code>.
 *
 * @see org.huberb.localenb.ui.LocalePanel
 */
final class LocaleTopComponent extends TopComponent {

    private static final long serialVersionUID = 20060130104600L;

    private static LocaleTopComponent instance;

    private FormatCommandInterface[] formatCommands;

    /**
     * Creates a new instance of LocaleTopComponent
     */
    private LocaleTopComponent() {
        initComponents();

        setName(NbBundle.getMessage(LocaleTopComponent.class, "CTL_LocaleTopComponent"));
        setToolTipText(NbBundle.getMessage(LocaleTopComponent.class, "HINT_LocaleTopComponent"));

        // (1) prepare the formatCommands per tab panel, for routing the
        //   format action to the right panel
        this.formatCommands = new FormatCommandInterface[3];

        // (2) create the tab panels
        final LocaleDatePanel localeDatePanel = new LocaleDatePanel();
        final LocaleNumberPanel localeNumberPanel = new LocaleNumberPanel();
        final LocaleMessagePanel localeMessagePanel = new LocaleMessagePanel();
        this.setDatePanel(localeDatePanel);
        this.setNumberPanel(localeNumberPanel);
        this.setMessagePanel(localeMessagePanel);

        this.localeTabbedPane.setSelectedComponent(localeDatePanel);
        this.handleTabChanged(localeDatePanel);

        // (3) additional component init
        this.localeComboBox.setModel(new LocaleComboBoxModel());
        final Locale defaultLocale = Locale.getDefault();
        this.localeComboBox.setSelectedItem(defaultLocale);

        // (4) tool tip for local combo box
        final LocaleToolTipActionListener localeToolTip = new LocaleToolTipActionListener();
        final String defaultLocalToolTipText = localeToolTip.formatLocale(defaultLocale);
        this.localeComboBox.setToolTipText(defaultLocalToolTipText);
        this.localeComboBox.addActionListener(localeToolTip);
    }

    private void setDatePanel(LocaleDatePanel localeDatePanel) {
        this.formatCommands[0] = localeDatePanel;
        this.localeTabbedPane.setComponentAt(0, localeDatePanel);
    }

    private void setNumberPanel(LocaleNumberPanel localeNumberPanel) {
        this.formatCommands[1] = localeNumberPanel;
        this.localeTabbedPane.setComponentAt(1, localeNumberPanel);
    }

    private void setMessagePanel(LocaleMessagePanel localeMessagePanel) {
        this.formatCommands[2] = localeMessagePanel;
        this.localeTabbedPane.setComponentAt(2, localeMessagePanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        localeToolBar = new javax.swing.JToolBar();
        formatButton = new javax.swing.JButton();
        toolBarSeparator = new javax.swing.JSeparator();
        localePanel = new javax.swing.JPanel();
        localeLabel = new javax.swing.JLabel();
        localeComboBox = new javax.swing.JComboBox();
        defaultLocale = new javax.swing.JButton();
        localeTabbedPane = new javax.swing.JTabbedPane();
        datePanel = new javax.swing.JPanel();
        numberPanel = new javax.swing.JPanel();
        textPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        formatButton.setText(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.formatButton.text")); // NOI18N
        formatButton.setToolTipText(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.formatButton.toolTipText")); // NOI18N
        formatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatButtonHandleAction(evt);
            }
        });

        localeToolBar.add(formatButton);

        toolBarSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        toolBarSeparator.setPreferredSize(new java.awt.Dimension(4, 0));
        localeToolBar.add(toolBarSeparator);

        localePanel.setLayout(new java.awt.GridBagLayout());

        localeLabel.setLabelFor(localeComboBox);
        localeLabel.setText(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.localeLabel.text")); // NOI18N
        localeLabel.setToolTipText(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.localeLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        localePanel.add(localeLabel, gridBagConstraints);

        localeComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.localeComboBox.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        localePanel.add(localeComboBox, gridBagConstraints);

        localeToolBar.add(localePanel);

        defaultLocale.setText(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.defaultLocale.text")); // NOI18N
        defaultLocale.setToolTipText(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.defaultLocale.toolTipText")); // NOI18N
        defaultLocale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultLocaleButtonHandleAction(evt);
            }
        });

        localeToolBar.add(defaultLocale);

        add(localeToolBar, java.awt.BorderLayout.NORTH);

        localeTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                localeTabbedPaneHandleTabSelected(evt);
            }
        });

        datePanel.setLayout(new java.awt.BorderLayout());

        localeTabbedPane.addTab(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.datePanel.TabConstraints.tabTitle"), datePanel); // NOI18N

        localeTabbedPane.addTab(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.numberPanel.TabConstraints.tabTitle"), numberPanel); // NOI18N

        localeTabbedPane.addTab(org.openide.util.NbBundle.getMessage(LocaleTopComponent.class, "LocaleTopComponent.textPanel.TabConstraints.tabTitle"), textPanel); // NOI18N

        add(localeTabbedPane, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void defaultLocaleButtonHandleAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultLocaleButtonHandleAction
        final Locale defaultLocale = Locale.getDefault();
        this.localeComboBox.setSelectedItem(defaultLocale);
    }//GEN-LAST:event_defaultLocaleButtonHandleAction

    private void localeTabbedPaneHandleTabSelected(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_localeTabbedPaneHandleTabSelected
        final Object objRef = evt.getSource();
        if (objRef != null && objRef instanceof JTabbedPane) {
            final JTabbedPane jtp = (JTabbedPane) objRef;
            final Component selectedComponent = jtp.getSelectedComponent();
            handleTabChanged(selectedComponent);
        }
    }//GEN-LAST:event_localeTabbedPaneHandleTabSelected

    private void formatButtonHandleAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatButtonHandleAction
        final Locale selectedLocale = (Locale) this.localeComboBox.getSelectedItem();
        final int selectedIndex = this.localeTabbedPane.getSelectedIndex();

        switch (selectedIndex) {
            case 0: // Date
                this.formatCommands[0].format(selectedLocale);
                break;
            case 1: // Number
                this.formatCommands[1].format(selectedLocale);
                break;
            case 2: // Text
                this.formatCommands[2].format(selectedLocale);
                break;
        }
    }//GEN-LAST:event_formatButtonHandleAction


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel datePanel;
    private javax.swing.JButton defaultLocale;
    private javax.swing.JButton formatButton;
    private javax.swing.JComboBox localeComboBox;
    private javax.swing.JLabel localeLabel;
    private javax.swing.JPanel localePanel;
    private javax.swing.JTabbedPane localeTabbedPane;
    private javax.swing.JToolBar localeToolBar;
    private javax.swing.JPanel numberPanel;
    private javax.swing.JPanel textPanel;
    private javax.swing.JSeparator toolBarSeparator;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Don't use directly, it reserved for '.settings'
     * file only, i.e. deserialization routines, otherwise you can get
     * non-deserialized instance.
     */
    public static synchronized LocaleTopComponent getDefault() {
        if (instance == null) {
            instance = new LocaleTopComponent();
        }
        return instance;
    }

    private static synchronized void setDefault(LocaleTopComponent newLocaleTopComponent) {
        if (instance == null) {
            instance = newLocaleTopComponent;
        }
    }

    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    private LocaleOptionPreferenceChangeListener localeOptionPreferenceChangeListener;

    public void componentOpened() {
        final LocaleOption localeOption = LocaleOption.getDefault();

        this.formatCommands[0].setPatterns(localeOption.getDatePatternList());
        this.formatCommands[1].setPatterns(localeOption.getNumberPatternList());
        this.formatCommands[2].setPatterns(localeOption.getMessagePatternList());

        this.localeOptionPreferenceChangeListener = new LocaleOptionPreferenceChangeListener(this.formatCommands);
        Preferences pref = NbPreferences.forModule(LocaleOption.class);
        pref.addPreferenceChangeListener(this.localeOptionPreferenceChangeListener);
    }

    public void componentClosed() {
        Preferences pref = NbPreferences.forModule(LocaleOption.class);
        pref.removePreferenceChangeListener(localeOptionPreferenceChangeListener);
    }

    protected String preferredID() {
        return "LocaleTopComponent";
    }

    /**
     * Set the help text for the selected tabbed panel.
     * <p>
     * If the <code>selectedComponent</code> implements
     * <code>HelpTextCommandInterface</code> the appropriate help text is
     * displayed
     * </p>
     *
     * @param selectedComponent the selected tab componenet
     */
    private void handleTabChanged(Component selectedComponent) {
    }

    //-------------------------------------------------------------
    // state serialization
    //-------------------------------------------------------------
    public Object readResolve() throws ObjectStreamException {
        setDefault(this);
        return getDefault();
    }

    public void writeExternal(ObjectOutput oo) throws IOException {
        super.writeExternal(oo);

        final Locale selectedLocale = (Locale) this.localeComboBox.getSelectedItem();
        Integer selectedTabIndex = this.localeTabbedPane.getSelectedIndex();

        final Object[] state = new Object[]{
            this.formatCommands[0].getState(),
            this.formatCommands[1].getState(),
            this.formatCommands[2].getState(),
            selectedLocale,
            selectedTabIndex,};
        Object writeObject;

        try {
            writeObject = new NbMarshalledObject(state);
        } catch (Exception e) {
            ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            writeObject = null;
        }
        oo.writeObject(writeObject);
    }

    public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
        super.readExternal(oi);

        final NbMarshalledObject readObject = (NbMarshalledObject) oi.readObject();
        if (readObject != null) {
            final Runnable r = new Runnable() {
                public void run() {
                    try {
                        Object[] state = (Object[]) readObject.get();
                        if (state.length >= 3) {
                            LocaleTopComponent.this.formatCommands[0].setState(state[0]);
                            LocaleTopComponent.this.formatCommands[1].setState(state[1]);
                            LocaleTopComponent.this.formatCommands[2].setState(state[2]);
                        }

                        if (state.length >= 4 && state[3] instanceof Locale) {
                            final Locale locale = (Locale) state[3];
                            LocaleTopComponent.this.localeComboBox.setSelectedItem(locale);
                        }

                        if (state.length >= 5 && state[4] instanceof Integer) {
                            final Integer selectedTabIndex = (Integer) state[4];
                            int componentCount = LocaleTopComponent.this.localeTabbedPane.getComponentCount();
                            if (selectedTabIndex >= 0 && selectedTabIndex < componentCount) {
                                LocaleTopComponent.this.localeTabbedPane.setSelectedIndex(selectedTabIndex);
                            }
                        }
                    } catch (Exception e) {
                        ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
                    }
                }
            };
            SwingUtilities.invokeLater(r);
        }
    }

    public HelpCtx getHelpCtx() {
        HelpCtx retValue = new HelpCtx("org.huberb.localenb.about");
        return retValue;
    }
}
