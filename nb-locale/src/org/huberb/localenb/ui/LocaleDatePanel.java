/*
 * LocalePanel.java
 *
 * Created on 18. Mai 2005, 22:59
 */
package org.huberb.localenb.ui;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 * A panel for formatting dates.
 *
 * @author HuberB1
 */
public class LocaleDatePanel extends javax.swing.JPanel implements FormatCommandInterface {

    private static final long serialVersionUID = 20060131123500L;

    /**
     * Creates new form LocalePanel
     */
    public LocaleDatePanel() {
         initComponents();

        applySpinnerDateModel(this.dateSpinner);
    }

    /**
     * Apply the right SpinnerModel depending on which RadioButton is selected.
     */
    private void applySpinnerModel() {
        if (this.msRadioButton.isSelected()) {
            applySpinnerNumberModel(this.dateSpinner);
        } else if (this.dateRadioButton.isSelected()) {
            applySpinnerDateModel(this.dateSpinner);
        } else {
            this.dateSpinner.setEnabled(false);
        }
    }

    /**
     * Set a Date value of the currently active SpinnerModel
     */
    private void setDateSpinnerValue(Date date) {
        SpinnerModel sm = this.dateSpinner.getModel();
        if (sm instanceof SpinnerNumberModel) {
            sm.setValue(date.getTime());
        } else if (sm instanceof SpinnerDateModel) {
            sm.setValue(date);
        }
    }

    /**
     * Get a Date value from the currently active SpinnerModel
     */
    private Date getDateSpinnerValue() {
        Date date = new Date();

        SpinnerModel sm = this.dateSpinner.getModel();
        if (sm instanceof SpinnerNumberModel) {
            Long value = (Long) sm.getValue();
            date.setTime(value);
        } else if (sm instanceof SpinnerDateModel) {
            date = (Date) sm.getValue();
        }
        return date;
    }

    /**
     * Apply a SpinnerDateModel to the jspinner component
     */
    private void applySpinnerDateModel(JSpinner jspinner) {
        SpinnerDateModel spm = new SpinnerDateModel();
        jspinner.setModel(spm);
        jspinner.setEnabled(true);

        JSpinner.DateEditor jsde = (JSpinner.DateEditor) jspinner.getEditor();
        jsde.getFormat().applyPattern("yyyy:MM:dd HH:mm:ss.SSS");

    }

    /**
     * Apply a SpinnerNumberModel to the jspinner component, using Long
     */
    private void applySpinnerNumberModel(JSpinner jspinner) {
        Date now = new Date();
        Long value = now.getTime();
        Long min = 0L;
        Long max = Long.MAX_VALUE;
        Long step = 1L;
        SpinnerNumberModel snm = new SpinnerNumberModel(value, min, max, step);

        jspinner.setModel(snm);
        jspinner.setEnabled(true);
    }

    /**
     * Build the formatting result.
     *
     * @param selectedLocale for formatting use this locale
     */
    @Override
    public void format(Locale selectedLocale) {
        final String pattern = (String) this.datePatternComboBox.getSelectedItem();
        final SimpleDateFormat sdf = new SimpleDateFormat(pattern, selectedLocale);
        final Date theDate = this.getDateSpinnerValue();

        final String result = sdf.format(theDate);
        this.dateFormattedObject.setText(result);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        dateFormatButtonGroup = new javax.swing.ButtonGroup();
        dateLabel = new javax.swing.JLabel();
        datePatternLabel = new javax.swing.JLabel();
        datePatternComboBox = new javax.swing.JComboBox();
        dateFormattedLabel = new javax.swing.JLabel();
        dateFormattedObject = new javax.swing.JTextField();
        dateSpinner = new javax.swing.JSpinner();
        nowButton = new javax.swing.JButton();
        msRadioButton = new javax.swing.JRadioButton();
        dateRadioButton = new javax.swing.JRadioButton();

        dateLabel.setDisplayedMnemonic('D');
        dateLabel.setText(org.openide.util.NbBundle.getMessage(LocaleDatePanel.class, "LocaleDatePanel.dateLabel.text")); // NOI18N

        datePatternLabel.setDisplayedMnemonic('P');
        datePatternLabel.setLabelFor(datePatternComboBox);
        datePatternLabel.setText(org.openide.util.NbBundle.getMessage(LocaleDatePanel.class, "LocaleDatePanel.datePatternLabel.text")); // NOI18N

        datePatternComboBox.setEditable(true);
        datePatternComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localeDateBeanActionHandler(evt);
            }
        });

        dateFormattedLabel.setDisplayedMnemonic('o');
        dateFormattedLabel.setText(org.openide.util.NbBundle.getMessage(LocaleDatePanel.class, "LocaleDatePanel.dateFormattedLabel.text")); // NOI18N

        dateFormattedObject.setEditable(false);
        dateFormattedObject.setText(org.openide.util.NbBundle.getMessage(LocaleDatePanel.class, "LocaleDatePanel.dateFormattedObject.text")); // NOI18N

        nowButton.setText(org.openide.util.NbBundle.getMessage(LocaleDatePanel.class, "LocaleDatePanel.nowButton.text")); // NOI18N
        nowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleNowAction(evt);
            }
        });

        dateFormatButtonGroup.add(msRadioButton);
        msRadioButton.setText(org.openide.util.NbBundle.getMessage(LocaleDatePanel.class, "LocaleDatePanel.msRadioButton.text")); // NOI18N
        msRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        msRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        msRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleDateFormatRadioButtonAction(evt);
            }
        });

        dateFormatButtonGroup.add(dateRadioButton);
        dateRadioButton.setSelected(true);
        dateRadioButton.setText(org.openide.util.NbBundle.getMessage(LocaleDatePanel.class, "LocaleDatePanel.dateRadioButton.text")); // NOI18N
        dateRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        dateRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dateRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleDateFormatRadioButtonAction(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, dateFormattedLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, datePatternLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(msRadioButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dateRadioButton))
                    .add(layout.createSequentialGroup()
                        .add(dateSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nowButton))
                    .add(datePatternComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dateFormattedObject, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(63, 63, 63)
                .add(dateLabel)
                .add(268, 268, 268))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dateLabel)
                    .add(dateSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nowButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(msRadioButton)
                    .add(dateRadioButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(datePatternComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(datePatternLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dateFormattedLabel)
                    .add(dateFormattedObject, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void handleDateFormatRadioButtonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleDateFormatRadioButtonAction

        applySpinnerModel();

    }//GEN-LAST:event_handleDateFormatRadioButtonAction

    private void handleNowAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleNowAction

        Date now = new Date();
        this.setDateSpinnerValue(now);

    }//GEN-LAST:event_handleNowAction

    private void localeDateBeanActionHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localeDateBeanActionHandler
//        if (this.localeDateBean != null) {
//            JComboBox comboBox = (JComboBox)evt.getSource();
//            String selectedDatePattern = (String)comboBox.getSelectedItem();
//            this.localeDateBean.setDatePattern( selectedDatePattern );
//        }
    }//GEN-LAST:event_localeDateBeanActionHandler


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup dateFormatButtonGroup;
    private javax.swing.JLabel dateFormattedLabel;
    private javax.swing.JTextField dateFormattedObject;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JComboBox datePatternComboBox;
    private javax.swing.JLabel datePatternLabel;
    private javax.swing.JRadioButton dateRadioButton;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JRadioButton msRadioButton;
    private javax.swing.JButton nowButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setPatterns(String[] newPatterns) {
        final DefaultComboBoxModel dcbm = (DefaultComboBoxModel) this.datePatternComboBox.getModel();
        Object selectedItem = dcbm.getSelectedItem();

        // (1) remove all elements from the ComboBoxModel
        dcbm.removeAllElements();

        // (2) add all new elements to the ComboBoxModel
        for (int i = 0; i < newPatterns.length; i++) {
            final String newPattern = newPatterns[i];
            dcbm.insertElementAt(newPattern, i);
        }
        if (selectedItem == null) {
            selectedItem = dcbm.getElementAt(0);
        }
        dcbm.setSelectedItem(selectedItem);
    }

    @Override
    public Object getState() {
        String pattern = (String) this.datePatternComboBox.getSelectedItem();
        final Date date = this.getDateSpinnerValue();
        final Object[] state = new Object[]{
            pattern,
            date,};
        return state;
    }

    @Override
    public void setState(Object newState) {
        Object[] state = (Object[]) newState;
        String pattern = (String) state[0];
        this.datePatternComboBox.setSelectedItem(pattern);

        Date date = (Date) state[1];
        this.setDateSpinnerValue(date);
    }

}
