package org.huberb.digestnb;

import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectStreamException;
import org.huberb.digestnb.helper.DigestActionCommand;
import org.huberb.digestnb.option.DigestOption;
import org.huberb.digestnb.ui.DigestPanel;
import org.openide.ErrorManager;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.io.NbMarshalledObject;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the DigestPanel.
 *
 * @see org.huberb.digestnb.ui.DigestPanel
 */
final class DigestTopComponent extends TopComponent {
    private static final long serialVersionUID = 1L;
    
    private static DigestTopComponent instance;
    
    private DigestPanel digestPanel;
    
    private DigestTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(DigestTopComponent.class, "CTL_DigestTopComponent"));
        setToolTipText(NbBundle.getMessage(DigestTopComponent.class, "HINT_DigestTopComponent"));
//        setIcon(ImageUtilities.loadImage("SET/PATH/TO/ICON/HERE", true));
        
        this.digestPanel = new DigestPanel();
        this.add( this.digestPanel );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Don't use directly, it reserved for '.settings' file only,
     * i.e. deserialization routines, otherwise you can get non-deserialized instance.
     */
    public static synchronized DigestTopComponent getDefault() {
        if (instance == null) {
            instance = new DigestTopComponent();
        }
        return instance;
    }
    private static synchronized void setDefault(DigestTopComponent newInstance) {
        if (instance == null) {
            instance = newInstance;
        }
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // propagate the digest option to the digest panel
        DigestOption digestOption = (DigestOption)DigestOption.getDefault();
        final String digestFormatMessage = digestOption.getDigestFormatMessage();
        this.digestPanel.setMessagePattern( digestFormatMessage );
        
        // install property change listener, listening to changes of DigestOptions
        digestOption.addPropertyChangeListener( this.digestPanel );
    }
    
    public void componentClosed() {
        DigestOption digestOption = (DigestOption)DigestOption.getDefault();
        // deinstall property change listener, listening to changes of DigestOptions
        digestOption.removePropertyChangeListener( this.digestPanel );
    }
    
    protected String preferredID() {
        return "DigestTopComponent";
    }
    public HelpCtx getHelpCtx() {
        final HelpCtx retValue = new HelpCtx("about_digestnb");
        return retValue;
    }

    //-------------------------------------------------------------
    // state serialization
    //-------------------------------------------------------------
    public Object readResolve() throws ObjectStreamException {
        setDefault( this );
        return getDefault();
    }
    
    public void writeExternal(ObjectOutput oo) throws IOException {
        super.writeExternal(oo);
        
        final DigestActionCommand dac = this.digestPanel.getDigestActionCommand();
        final Object[] state = new Object[] {
            dac,
        };
        Object writeObject;
        
        try {
            writeObject = new NbMarshalledObject(state);
        } catch (Exception e) {
            ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            writeObject = null;
        }
        oo.writeObject(writeObject);
    }
    
    public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
        super.readExternal(oi);
        
        final NbMarshalledObject readObject =(NbMarshalledObject)oi.readObject();
        if (readObject != null) {
            try {
                Object[] state = (Object[])readObject.get();
                final DigestActionCommand dac = (DigestActionCommand)state[0];
                
                this.digestPanel.setDigestActionCommand( dac );
            } catch (Exception e) {
                ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            }
        }
    }
}
