/*
 * REPanel.java
 *
 * Created on 28. Mï¿½rz 2005, 11:32
 */
package org.huberb.regexpnb.ui;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;

/**
 * A simple panel for entering a regular expression, an text input string,
 * matching options, and buttons for triggering the matching.
 *
 * @author HuberB1
 */
public class RegexpPanel extends javax.swing.JPanel {

    /**
     * Creates new form REPanel
     */
    public RegexpPanel() {
        initComponents();
        //this.regularExpressionPanel.setBorder(com.jgoodies.forms.factories.Borders.DLU2_BORDER );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        toolBar = new javax.swing.JToolBar();
        matchButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        regularExpressionInputPanel = new javax.swing.JPanel();
        regularExpressionLabel = new javax.swing.JLabel();
        regularExpressionPattern = new javax.swing.JTextField();
        inputStringLabel = new javax.swing.JLabel();
        inputStringScrollPane = new javax.swing.JScrollPane();
        inputStringTextArea = new javax.swing.JTextArea();
        checkBoxSeparator = new javax.swing.JSeparator();
        checkBoxPanel = new javax.swing.JPanel();
        multilineCheckBox = new javax.swing.JCheckBox();
        caseSensitiveCheckBox = new javax.swing.JCheckBox();
        dotAllCheckBox = new javax.swing.JCheckBox();
        unicodeCaseCheckBox = new javax.swing.JCheckBox();
        resultScrollPane = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        matchButton.setMnemonic('M');
        matchButton.setText("Match");
        matchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchAction(evt);
            }
        });

        toolBar.add(matchButton);

        findButton.setMnemonic('F');
        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAction(evt);
            }
        });

        toolBar.add(findButton);

        add(toolBar, java.awt.BorderLayout.NORTH);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        regularExpressionInputPanel.setLayout(new java.awt.GridBagLayout());

        regularExpressionLabel.setDisplayedMnemonic('R');
        regularExpressionLabel.setLabelFor(regularExpressionPattern);
        regularExpressionLabel.setText("Regular Expression");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        regularExpressionInputPanel.add(regularExpressionLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        regularExpressionInputPanel.add(regularExpressionPattern, gridBagConstraints);

        inputStringLabel.setDisplayedMnemonic('T');
        inputStringLabel.setLabelFor(inputStringTextArea);
        inputStringLabel.setText("Text Input");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        regularExpressionInputPanel.add(inputStringLabel, gridBagConstraints);

        inputStringScrollPane.setViewportView(inputStringTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        regularExpressionInputPanel.add(inputStringScrollPane, gridBagConstraints);

        checkBoxSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        regularExpressionInputPanel.add(checkBoxSeparator, gridBagConstraints);

        checkBoxPanel.setLayout(new javax.swing.BoxLayout(checkBoxPanel, javax.swing.BoxLayout.Y_AXIS));

        multilineCheckBox.setText("Multiline");
        checkBoxPanel.add(multilineCheckBox);

        caseSensitiveCheckBox.setText("CaseInSensitive");
        checkBoxPanel.add(caseSensitiveCheckBox);

        dotAllCheckBox.setText("DotAll");
        checkBoxPanel.add(dotAllCheckBox);

        unicodeCaseCheckBox.setText("UnicodeCase");
        checkBoxPanel.add(unicodeCaseCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        regularExpressionInputPanel.add(checkBoxPanel, gridBagConstraints);

        jSplitPane1.setLeftComponent(regularExpressionInputPanel);

        resultTextArea.setEditable(false);
        resultScrollPane.setViewportView(resultTextArea);

        jSplitPane1.setRightComponent(resultScrollPane);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    /**
     */
    private void findAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAction

        try {
            final String patternAsString = this.regularExpressionPattern.getText();
            final String inputAsString = this.inputStringTextArea.getText();

            final Pattern pattern = Pattern.compile(patternAsString, this.buildFlagsFromCheckBoxes());
            Matcher matcher = pattern.matcher(inputAsString);
            final boolean matchesResult = matcher.find();

            StringBuffer sb = buildResult(matcher, matchesResult);
            this.resultTextArea.setText(sb.toString());
        } catch (Exception e) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot run find action");
        }
    }//GEN-LAST:event_findAction

    private void matchAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchAction
        try {
            final String patternAsString = this.regularExpressionPattern.getText();
            final String inputAsString = this.inputStringTextArea.getText();

            final Pattern pattern = Pattern.compile(patternAsString, this.buildFlagsFromCheckBoxes());
            Matcher matcher = pattern.matcher(inputAsString);
            final boolean matchesResult = matcher.matches();

            StringBuffer sb = buildResult(matcher, matchesResult);
            this.resultTextArea.setText(sb.toString());
        } catch (Exception e) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot run match action");
        }
    }//GEN-LAST:event_matchAction

    /**
     * Build Pattern flags from checkboxes
     *
     * @return int a value or by the <code>Pattern</code> flags, like
     * <code>Pattern.CASE_INSENSITIVE</code>
     */
    private int buildFlagsFromCheckBoxes() {
        int flag = 0;
        flag |= this.caseSensitiveCheckBox.isSelected() ? Pattern.CASE_INSENSITIVE : 0;
        flag |= this.dotAllCheckBox.isSelected() ? Pattern.DOTALL : 0;
        flag |= this.multilineCheckBox.isSelected() ? Pattern.MULTILINE : 0;
        flag |= this.unicodeCaseCheckBox.isSelected() ? Pattern.UNICODE_CASE : 0;
        return flag;
    }

    /**
     * Build a result string from the matcher result
     *
     * @param matcher inspect the matcher props for build the result string
     * @param matchesResult the matcher result
     * @return StringBuffer the matcher result as an human readable result
     * string
     */
    private StringBuffer buildResult(Matcher matcher, boolean matchesResult) {
        final StringBuffer sb = new StringBuffer();
        Object[] args = null;

        args = new Object[]{
            matchesResult, matcher.hasAnchoringBounds(), matcher.hasTransparentBounds()
        };
        sb.append(NbBundle.getMessage(RegexpPanel.class,
                "buildResultSummaryPatternRegexpPanel", args));

        if (matchesResult) {
            final String group = matcher.group();
            final int groupCount = matcher.groupCount();
            args = new Object[]{
                group, new Integer(groupCount)
            };
            sb.append(NbBundle.getMessage(RegexpPanel.class,
                    "buildResultGroupPatternRegexpPanel", args));

            for (int i = 0; i <= groupCount; i++) {
                String groupDetail = matcher.group(i);
                args = new Object[]{
                    new Integer(i), groupDetail
                };
                sb.append(NbBundle.getMessage(RegexpPanel.class,
                        "buildResultGroupMatchingPatternRegexpPanel", args));
            }
        }
        return sb;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox caseSensitiveCheckBox;
    private javax.swing.JPanel checkBoxPanel;
    private javax.swing.JSeparator checkBoxSeparator;
    private javax.swing.JCheckBox dotAllCheckBox;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel inputStringLabel;
    private javax.swing.JScrollPane inputStringScrollPane;
    private javax.swing.JTextArea inputStringTextArea;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton matchButton;
    private javax.swing.JCheckBox multilineCheckBox;
    private javax.swing.JPanel regularExpressionInputPanel;
    private javax.swing.JLabel regularExpressionLabel;
    private javax.swing.JTextField regularExpressionPattern;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JCheckBox unicodeCaseCheckBox;
    // End of variables declaration//GEN-END:variables

}
