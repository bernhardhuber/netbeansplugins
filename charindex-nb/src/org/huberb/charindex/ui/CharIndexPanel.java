/*
 * CharIndexPanel.java
 *
 * Created on 18. November 2005, 19:29
 */

package org.huberb.charindex.ui;

import java.awt.event.ActionEvent;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 * A simple panel for specifying the mnemonic.
 *
 * @author  HuberB1
 */
public class CharIndexPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form CharIndexPanel
     */
    public CharIndexPanel() {
        initComponents();
        
        // setup the ComboBox
        final String inputTextFieldText = this.inputTextField.getText();
        this.updateComboBoxModel(inputTextFieldText);
        
        // setup the SpinnerNumberModel
        final SpinnerNumberModel snm = (SpinnerNumberModel)this.indexSpinner.getModel();
        snm.setMinimum( new Integer(1) );
        snm.setMaximum( new Integer(256) );
        snm.setValue( new Integer(1) );

        // setup a DocumentListener 
        final ADocumentListener aDocumentListener = new ADocumentListener();
        this.inputTextField.getDocument().addDocumentListener( aDocumentListener );
        this.indexSpinner.addChangeListener( new ASpinnerChangeListener() );
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        actionToolBar = new javax.swing.JToolBar();
        calcMnemonic = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        inputTextLabel = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        indexLabel = new javax.swing.JLabel();
        indexSpinner = new javax.swing.JSpinner();
        mnemonicLabel = new javax.swing.JLabel();
        mnemonicResultLabel = new javax.swing.JLabel();
        mnemonicInfoLabel = new javax.swing.JLabel();
        mnemonicInfoTextField = new javax.swing.JTextField();
        lettersComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout(4, 4));

        calcMnemonic.setMnemonic('C');
        calcMnemonic.setText("CalculateMnemonic");
        calcMnemonic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleCalcMnemonic(evt);
            }
        });

        actionToolBar.add(calcMnemonic);

        add(actionToolBar, java.awt.BorderLayout.NORTH);

        inputTextLabel.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_INPUT_MNI")));
        inputTextLabel.setLabelFor(inputTextField);
        inputTextLabel.setText(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_INPUT"));

        inputTextField.setText("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");

        indexLabel.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_INPUT_MNEMONIC_INDEX_MNI")));
        indexLabel.setLabelFor(indexSpinner);
        indexLabel.setText(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_INPUT_MNEMONIC_INDEX"));

        mnemonicLabel.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_MNEMONIC_MNI")));
        mnemonicLabel.setLabelFor(mnemonicResultLabel);
        mnemonicLabel.setText(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_MNEMONIC"));

        mnemonicResultLabel.setText(" ");

        mnemonicInfoLabel.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_MNEMONIC_INFO_MNI")));
        mnemonicInfoLabel.setLabelFor(mnemonicInfoTextField);
        mnemonicInfoLabel.setText(org.openide.util.NbBundle.getMessage(CharIndexPanel.class, "LBL_MNEMONIC_INFO"));

        mnemonicInfoTextField.setEditable(false);

        lettersComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        lettersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleLetterSelected(evt);
            }
        });

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, inputTextLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, indexLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mnemonicLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mnemonicInfoLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mnemonicResultLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .add(inputTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .add(mnemonicInfoTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(indexSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lettersComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        mainPanelLayout.linkSize(new java.awt.Component[] {indexSpinner, lettersComboBox}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(inputTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(inputTextLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(indexLabel)
                    .add(indexSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lettersComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mnemonicLabel)
                    .add(mnemonicResultLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mnemonicInfoLabel)
                    .add(mnemonicInfoTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        add(mainPanel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Handle the selection of a letter.
     *
     */
    private void handleLetterSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleLetterSelected
        
        final String inputText = this.inputTextField.getText();
        
        final String letter = (String)this.lettersComboBox.getSelectedItem();
        if (letter == null || letter.length() <= 0) {
            return ;
        }
        
        final char c = letter.charAt(0);
        
        this.mnemonicResultLabel.setText( inputText );
        this.mnemonicResultLabel.setDisplayedMnemonic(c);

        updateInfo( c );
    }//GEN-LAST:event_handleLetterSelected
    
    /**
     * Handle calculating the mnemonic.
     *
     * @param evt the action event triggering the calculation
     */
    private void handleCalcMnemonic(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleCalcMnemonic
        
        final String inputText = this.inputTextField.getText();
        Integer indexAsInteger = (Integer)this.indexSpinner.getModel().getValue();
        
        if (inputText.length() <= 0 || indexAsInteger.intValue() <= 0) {
            return ;
        }
        
        int inputTextIndex = indexAsInteger.intValue() -1;
        if (inputTextIndex >= 0 && inputTextIndex < inputText.length()) {
            char c = inputText.charAt(inputTextIndex);
            
            this.mnemonicResultLabel.setText( inputText );
            this.mnemonicResultLabel.setDisplayedMnemonic(c);
            this.mnemonicResultLabel.setDisplayedMnemonicIndex(inputTextIndex);
            
            updateInfo( c );
        } else {
            final String EMPTY = "";
            this.mnemonicResultLabel.setText( EMPTY );
            this.mnemonicInfoTextField.setText( EMPTY );
        }
    }//GEN-LAST:event_handleCalcMnemonic
    
    /**
     * Update the info label.
     *
     * @param c the mnemonic character
     */
    protected void updateInfo( char c ) {
        StringBuffer sb = new StringBuffer();
        sb.append( c + " " + String.valueOf((int)c) );
        this.mnemonicInfoTextField.setText( sb.toString() );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JToolBar actionToolBar;
    public javax.swing.JButton calcMnemonic;
    public javax.swing.JLabel indexLabel;
    public javax.swing.JSpinner indexSpinner;
    public javax.swing.JTextField inputTextField;
    public javax.swing.JLabel inputTextLabel;
    public javax.swing.JComboBox lettersComboBox;
    public javax.swing.JPanel mainPanel;
    public javax.swing.JLabel mnemonicInfoLabel;
    public javax.swing.JTextField mnemonicInfoTextField;
    public javax.swing.JLabel mnemonicLabel;
    public javax.swing.JLabel mnemonicResultLabel;
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * A DocumentListener listening to user's input.
     * <p>
     * This listener updates the DefaultComboBoxModel.
     * The DefaultComboBoxModel holds the unquie letters of the document's text.
     */
    class ADocumentListener implements DocumentListener {
        
        public void changedUpdate(DocumentEvent documentEvent) {
        }
        
        public void insertUpdate(DocumentEvent documentEvent) {
            final Document document = documentEvent.getDocument();
            updateTheComboBoxModel( document );
        }
        
        public void removeUpdate(DocumentEvent documentEvent) {
            final Document document = documentEvent.getDocument();
            updateTheComboBoxModel( document );
        }
        
        /**
         * update the combox box
         *
         * @param document use the document's text to calculate the selectable
         *   mnemonic letters
         */
        protected void updateTheComboBoxModel( Document document ) {
            final int documentLength = document.getLength();
            String text = null;
            try {
                text = document.getText( 0, documentLength );
                updateComboBoxModel( text );
            } catch (BadLocationException ble) {
                return ;
            }
        }
    }
    
    /**
     * This listener listens to changes of the Spinner.
     * <p>
     * This listener updates the mnemonic by the mnemonic index.
     */
    class ASpinnerChangeListener implements ChangeListener {
        
        public void stateChanged(ChangeEvent changeEvent) {
            final JSpinner spinner = (JSpinner)changeEvent.getSource();
            final Integer v = (Integer)spinner.getValue();
            final int vAsInt = v.intValue();
            
            final String inputText = inputTextField.getText();
            if (vAsInt > 0 && vAsInt <= inputText.length()) {
                //int newCaretPosition = vAsInt -1;
                //inputTextField.setCaretPosition( vAsInt );
                ActionEvent ae = new ActionEvent(spinner, 1, null );
                handleCalcMnemonic(ae);
            }
        }
    }
    
    /**
     * update the combox box
     *
     * @param document use the document's text to calculate the selectable
     *   mnemonic letters
     */
    protected void updateComboBoxModel( String text ) {
        final String[] letters = toLetters(text);
        
        final DefaultComboBoxModel dcbm = (DefaultComboBoxModel)lettersComboBox.getModel();
        dcbm.removeAllElements();
        for (int i = 0; i < letters.length; i++ ) {
            dcbm.addElement( letters[i] );
        }
    }
    
    /**
     * Calculate unique letters
     *
     * @param text split this String to its unique letters
     * @return String[] array of unique letters
     */
    protected String[] toLetters( String text ) {
        SortedSet<String> mapOfLetters = new TreeSet<String>();
        
        for (int i = 0; i < text.length(); i++ ) {
            String s = text.substring( i, i +1 );
            mapOfLetters.add( s );
        }
        String[] letters = (String[])mapOfLetters.toArray(new String[mapOfLetters.size()]);
        return letters;
    }
}
