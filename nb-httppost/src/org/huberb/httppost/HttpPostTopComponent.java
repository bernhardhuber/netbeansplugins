package org.huberb.httppost;

import java.awt.BorderLayout;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectStreamException;
import java.util.List;
import javax.swing.JToolBar;
import org.huberb.httppost.actions.HttpPostAction;
import org.huberb.httppost.model.HttpPostForm;
import org.huberb.httppost.model.Persistance;
import org.huberb.httppost.node.HttpPostFormFolderNode;
import org.huberb.httppost.node.HttpPostFormNode;
import org.huberb.httppost.util.ConstantsHelper;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.actions.SystemAction;
import org.openide.util.io.NbMarshalledObject;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final public class HttpPostTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static HttpPostTopComponent instance;

    private final ExplorerManager mgr = new ExplorerManager();
    private final HttpPostFormFolderNode currentNodeFolder;
    private final HttpPostFormFolderNode rootNodeFolder;
    private final HttpPostFormFolderNode savedNodeFolder;
    //private final Node savedNodeFolder;

    /**
     * path to the icon used by the component and its open action
     */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "HttpPostTopComponent";

    private HttpPostTopComponent() {
        initComponents();

        JToolBar toolBar = SystemAction.createToolbarPresenter(new SystemAction[]{
            SystemAction.get(HttpPostAction.class),});
        this.add(toolBar, BorderLayout.NORTH);

        setName(NbBundle.getMessage(HttpPostTopComponent.class, "CTL_HttpPostTopComponent"));
        setToolTipText(NbBundle.getMessage(HttpPostTopComponent.class, "HINT_HttpPostTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));

        //---
        this.savedNodeFolder = new HttpPostFormFolderNode("HttpPostFormSavedFolderNode.displayName", false);
        this.currentNodeFolder = new HttpPostFormFolderNode("HttpPostFormFolderNode.displayName", true);

        final Children.Array rootChildren = new Children.Array();
        rootChildren.add(new Node[]{
            currentNodeFolder,
            savedNodeFolder,});
        this.rootNodeFolder = new HttpPostFormFolderNode("HttpPostFormRootFolderNode.displayName", rootChildren);

        refreshSavedFolderNode();
        //---
        mgr.setRootContext(rootNodeFolder);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        splitPane = new javax.swing.JSplitPane();
        explorerViewScrollPane = new BeanTreeView();
        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new org.huberb.httppost.ui.MainPanel();

        setLayout(new java.awt.BorderLayout());

        splitPane.setContinuousLayout(true);
        splitPane.setOneTouchExpandable(true);
        splitPane.setLeftComponent(explorerViewScrollPane);

        mainScrollPane.setViewportView(mainPanel);

        splitPane.setRightComponent(mainScrollPane);

        add(splitPane, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane explorerViewScrollPane;
    private org.huberb.httppost.ui.MainPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use
     * {@link findInstance}.
     */
    public static synchronized HttpPostTopComponent getDefault() {
        if (instance == null) {
            instance = new HttpPostTopComponent();
        }
        return instance;
    }

    private static synchronized void setDefault(HttpPostTopComponent newInstance) {
        if (instance == null) {
            instance = newInstance;
        }
    }

    /**
     * Obtain the HttpPostTopComponent instance. Never call {@link #getDefault}
     * directly!
     */
    public static synchronized HttpPostTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find HttpPost component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof HttpPostTopComponent) {
            return (HttpPostTopComponent) win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public HelpCtx getHelpCtx() {
        return ConstantsHelper.getHelpCtx();
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    //-------------------------------------------------------------
    // state serialization
    //-------------------------------------------------------------
    public Object readResolve() throws ObjectStreamException {
        setDefault(this);
        return getDefault();
    }

    @Override
    public void writeExternal(ObjectOutput oo) throws IOException {
        super.writeExternal(oo);

        final Object[] state = new Object[]{
            this.splitPane.getDividerLocation()};
        Object writeObject;

        try {
            writeObject = new NbMarshalledObject(state);
        } catch (Exception e) {
            ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            writeObject = null;
        }
        oo.writeObject(writeObject);
    }

    @Override
    public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
        super.readExternal(oi);

        final NbMarshalledObject readObject = (NbMarshalledObject) oi.readObject();
        if (readObject != null) {
            try {
                Object[] state = (Object[]) readObject.get();

                if (state != null && state.length > 0) {
                    Integer dividerLocation = (Integer) state[0];
                    if (dividerLocation != null) {
                        this.splitPane.setDividerLocation(dividerLocation.intValue());
                    }
                }
            } catch (Exception e) {
                ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            }
        }
    }

    //----
    public HttpPostForm getHttpPostForm() {
        HttpPostForm httpPostForm = this.mainPanel.getHttpPostForm();
        return httpPostForm;
    }

    public void resetHttpPostFormView(HttpPostForm httpPostForm) {
        httpPostForm.clearAllResponseData();
        updateHttpPostFormResponseOnly(httpPostForm);
    }

    public void publishHttpPostFormView(HttpPostForm httpPostForm) {
        updateHttpPostFormResponseOnly(httpPostForm);
        if (httpPostForm != null) {
            try {
                HttpPostForm clone;
                clone = (HttpPostForm) httpPostForm.clone();
                HttpPostFormNode hpfn = new HttpPostFormNode(clone);
                this.currentNodeFolder.getHttpPostFromChildren().add(new Node[]{hpfn});
            } catch (CloneNotSupportedException ex) {
                ErrorManager.getDefault().notify(ex);
            }
        }
    }

    public void updateHttpPostFormResponseOnly(HttpPostForm httpPostForm) {
        this.mainPanel.updateHttpPostFormResponseOnly(httpPostForm);
    }

    public void updateHttpPostForm(HttpPostForm httpPostForm) {
        this.mainPanel.updateHttpPostForm(httpPostForm);
    }

    //----
    @Override
    public ExplorerManager getExplorerManager() {
        return this.mgr;
    }

    //----
    public HttpPostFormFolderNode getSavedNodeFolder() {
        return this.savedNodeFolder;
    }

    public HttpPostFormFolderNode getCurrentNodeFolder() {
        return this.currentNodeFolder;
    }

    public void refreshSavedFolderNode() {
        final Persistance persistance = new Persistance();
        final List<HttpPostForm> list = persistance.load();
        final HttpPostFormNode[] nodes = new HttpPostFormNode[list.size()];
        int i = 0;
        for (HttpPostForm hpf : list) {
            HttpPostFormNode node = new HttpPostFormNode(hpf);
            nodes[i++] = node;
        }
        this.savedNodeFolder.getHttpPostFromChildren().add(nodes);
    }
}
