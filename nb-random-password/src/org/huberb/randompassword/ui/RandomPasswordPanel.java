/*
 * RandomPasswordPanel.java
 *
 * Created on 18. November 2005, 18:39
 */

package org.huberb.randompassword.ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.SpinnerNumberModel;
import org.huberb.randompassword.helper.CharacterClass;
import org.huberb.randompassword.helper.RandomPasswordSuggestioner;
import org.openide.util.NbBundle;

/**
 * A simple Panel for specifying the password constraints.
 *
 * @author  HuberB1
 */
public class RandomPasswordPanel extends javax.swing.JPanel {
    
    private final JComponent[] characterClasseJComponent;
    private final JComponent[] freeJComponents;
    
    /** Creates new form RandomPasswordPanel */
    public RandomPasswordPanel() {
        
        initComponents();
        
        // set the spinner model
        SpinnerNumberModel sm = (SpinnerNumberModel)this.numberOfCharactersSpinner.getModel();
        sm.setMinimum(1);
        sm.setMaximum(256);
        sm.setValue(12);
        
        // set the tool tips
        this.charactersLowerCaseCheckBox.setToolTipText( CharacterClass.LOWER_CASE.getCharacters() );
        this.charactersUpperCaseCheckBox.setToolTipText( CharacterClass.UPPER_CASE.getCharacters() );
        this.digitsCheckBox.setToolTipText( CharacterClass.DIGITS.getCharacters() );
        this.charactersSpecialCheckBox.setToolTipText( CharacterClass.SPECIAL.getCharacters() );
        
        this.characterClasseJComponent = new JComponent[] {
            this.charactersUpperCaseCheckBox,
            this.charactersLowerCaseCheckBox,
            this.digitsCheckBox,
            this.charactersSpecialCheckBox,
        };
        this.freeJComponents = new JComponent[] {
            this.freeCharactersTextField,
        };
        
        this.classesRadioButton.setSelected(true);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        characterButtonGroup = new javax.swing.ButtonGroup();
        actionToolBar = new javax.swing.JToolBar();
        createPasswordButton = new javax.swing.JButton();
        cleanResultsPasswordButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        numberOfCharactersLabel = new javax.swing.JLabel();
        numberOfCharactersSpinner = new javax.swing.JSpinner();
        charactersTitlePanel = new javax.swing.JPanel();
        charactersLabel = new javax.swing.JLabel();
        charactersTitleSeparator = new javax.swing.JSeparator();
        classesRadioButton = new javax.swing.JRadioButton();
        charactersUpperCaseCheckBox = new javax.swing.JCheckBox();
        charactersLowerCaseCheckBox = new javax.swing.JCheckBox();
        digitsCheckBox = new javax.swing.JCheckBox();
        charactersSpecialCheckBox = new javax.swing.JCheckBox();
        freeRadioButton = new javax.swing.JRadioButton();
        freeCharactersTextField = new javax.swing.JTextField();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsPasswords = new javax.swing.JTextArea();
        passwordResultTitlePanel = new javax.swing.JPanel();
        passwordResultTitleLabel = new javax.swing.JLabel();
        passwordResultTitleSeparator = new javax.swing.JSeparator();

        setLayout(new java.awt.BorderLayout());

        createPasswordButton.setMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_CREATE_PASSWORD_MNI")));
        createPasswordButton.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_CREATE_PASSWORD")); // NOI18N
        createPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleCreatePasswordAction(evt);
            }
        });

        actionToolBar.add(createPasswordButton);

        cleanResultsPasswordButton.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "RandomPasswordPanel.cleanResultsPasswordButton.text")); // NOI18N
        cleanResultsPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanResultsPasswordButtonActionPerformed(evt);
            }
        });

        actionToolBar.add(cleanResultsPasswordButton);

        add(actionToolBar, java.awt.BorderLayout.NORTH);

        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        numberOfCharactersLabel.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_NUMBER_OF_CHARACTERS_MNI")));
        numberOfCharactersLabel.setLabelFor(numberOfCharactersSpinner);
        numberOfCharactersLabel.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_NUMBER_OF_CHARACTERS")); // NOI18N

        charactersTitlePanel.setLayout(new java.awt.GridBagLayout());

        charactersLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        charactersLabel.setLabelFor(charactersLowerCaseCheckBox);
        charactersLabel.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_CHARACTERS")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        charactersTitlePanel.add(charactersLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        charactersTitlePanel.add(charactersTitleSeparator, gridBagConstraints);

        characterButtonGroup.add(classesRadioButton);
        classesRadioButton.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "RandomPasswordPanel.classesRadioButton.text")); // NOI18N
        classesRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        classesRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        classesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classesRadioButtonActionPerformed(evt);
            }
        });

        charactersUpperCaseCheckBox.setMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_UPPER_CASE_CHARACTERS_MNI")));
        charactersUpperCaseCheckBox.setSelected(true);
        charactersUpperCaseCheckBox.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_UPPER_CASE_CHARACTERS")); // NOI18N
        charactersUpperCaseCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        charactersUpperCaseCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        charactersLowerCaseCheckBox.setMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_LOWER_CASE_CHARACTERS_MNI")));
        charactersLowerCaseCheckBox.setSelected(true);
        charactersLowerCaseCheckBox.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_LOWER_CASE_CHARACTERS")); // NOI18N
        charactersLowerCaseCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        charactersLowerCaseCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        digitsCheckBox.setMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_DIGITS_MNI")));
        digitsCheckBox.setSelected(true);
        digitsCheckBox.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_DIGITS")); // NOI18N
        digitsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        digitsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        charactersSpecialCheckBox.setMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_SPECIAL_CHARACTERS_MNI")));
        charactersSpecialCheckBox.setSelected(true);
        charactersSpecialCheckBox.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "LBL_SPECIAL_CHARACTERS")); // NOI18N
        charactersSpecialCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        charactersSpecialCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        characterButtonGroup.add(freeRadioButton);
        freeRadioButton.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "RandomPasswordPanel.freeRadioButton.text")); // NOI18N
        freeRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        freeRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        freeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeRadioButtonActionPerformed(evt);
            }
        });

        resultsPasswords.setColumns(20);
        resultsPasswords.setEditable(false);
        resultsPasswords.setFont(new java.awt.Font("Courier New", 0, 12));
        resultsPasswords.setRows(5);
        resultsScrollPane.setViewportView(resultsPasswords);

        passwordResultTitlePanel.setLayout(new java.awt.GridBagLayout());

        passwordResultTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        passwordResultTitleLabel.setText(org.openide.util.NbBundle.getMessage(RandomPasswordPanel.class, "RandomPasswordPanel.passwordResultTitleLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        passwordResultTitlePanel.add(passwordResultTitleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        passwordResultTitlePanel.add(passwordResultTitleSeparator, gridBagConstraints);

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(charactersTitlePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
            .add(mainPanelLayout.createSequentialGroup()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resultsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .add(passwordResultTitlePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(classesRadioButton)
                            .add(freeRadioButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(charactersLowerCaseCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(charactersSpecialCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(charactersUpperCaseCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(digitsCheckBox)
                                .add(70, 70, 70))
                            .add(freeCharactersTextField)))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(numberOfCharactersLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(numberOfCharactersSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(charactersTitlePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(numberOfCharactersLabel)
                    .add(numberOfCharactersSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(classesRadioButton)
                    .add(charactersUpperCaseCheckBox)
                    .add(digitsCheckBox))
                .add(5, 5, 5)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(charactersLowerCaseCheckBox)
                    .add(charactersSpecialCheckBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(freeRadioButton)
                    .add(freeCharactersTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(passwordResultTitlePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addContainerGap())
        );
        add(mainPanel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    private void freeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeRadioButtonActionPerformed
        this.setEnabledJComponents( this.characterClasseJComponent, false );
        this.setEnabledJComponents( this.freeJComponents, true );
    }//GEN-LAST:event_freeRadioButtonActionPerformed
    
    private void classesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classesRadioButtonActionPerformed
        this.setEnabledJComponents( this.characterClasseJComponent, true );
        this.setEnabledJComponents( this.freeJComponents, false );
    }//GEN-LAST:event_classesRadioButtonActionPerformed
    
    private void setEnabledJComponents( JComponent[] jcomponents, boolean newEnabled ) {
        for (int i = 0; i < jcomponents.length; i++ ) {
            JComponent jc = jcomponents[i];
            jc.setEnabled( newEnabled );
        }
    }
    private void cleanResultsPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanResultsPasswordButtonActionPerformed
        this.resultsPasswords.setText("");
    }//GEN-LAST:event_cleanResultsPasswordButtonActionPerformed
    
    private void handleCreatePasswordAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleCreatePasswordAction
        
        final RandomPasswordSuggestioner rps = this.getRandomPasswordSuggestioner();
        final Integer passwordLength = (Integer)this.numberOfCharactersSpinner.getModel().getValue();
        String suggestedPassword = "";
        
        if (this.freeRadioButton.isSelected()) {
            final String allowedCharacters = this.freeCharactersTextField.getText();
            
            // fetch a password suggestion
            suggestedPassword = rps.suggestPassword(passwordLength, allowedCharacters );
        } else if (this.classesRadioButton.isSelected()) {
            // set up the allowed characters
            final List <CharacterClass> allowedCharacterClasses = new ArrayList<>();
            
            if (this.charactersLowerCaseCheckBox.isSelected()) {
                allowedCharacterClasses.add( CharacterClass.LOWER_CASE );
            }
            if (this.charactersUpperCaseCheckBox.isSelected()) {
                allowedCharacterClasses.add( CharacterClass.UPPER_CASE );
            }
            if (this.digitsCheckBox.isSelected()) {
                allowedCharacterClasses.add( CharacterClass.DIGITS );
            }
            if (this.charactersSpecialCheckBox.isSelected()) {
                allowedCharacterClasses.add( CharacterClass.SPECIAL );
            }
            
            // fetch a password suggestion
            suggestedPassword = rps.suggestPassword(passwordLength, allowedCharacterClasses );
        }
        
        // print the suggested password
        final String formattedResultPassword = NbBundle.getMessage(RandomPasswordPanel.class, "PASSWORD_FORMAT", new Object[] {suggestedPassword} );
        this.resultsPasswords.append( formattedResultPassword );
        
    }//GEN-LAST:event_handleCreatePasswordAction
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JToolBar actionToolBar;
    public javax.swing.ButtonGroup characterButtonGroup;
    public javax.swing.JLabel charactersLabel;
    public javax.swing.JCheckBox charactersLowerCaseCheckBox;
    public javax.swing.JCheckBox charactersSpecialCheckBox;
    public javax.swing.JPanel charactersTitlePanel;
    public javax.swing.JSeparator charactersTitleSeparator;
    public javax.swing.JCheckBox charactersUpperCaseCheckBox;
    public javax.swing.JRadioButton classesRadioButton;
    public javax.swing.JButton cleanResultsPasswordButton;
    public javax.swing.JButton createPasswordButton;
    public javax.swing.JCheckBox digitsCheckBox;
    public javax.swing.JTextField freeCharactersTextField;
    public javax.swing.JRadioButton freeRadioButton;
    public javax.swing.JPanel mainPanel;
    public javax.swing.JLabel numberOfCharactersLabel;
    public javax.swing.JSpinner numberOfCharactersSpinner;
    public javax.swing.JLabel passwordResultTitleLabel;
    public javax.swing.JPanel passwordResultTitlePanel;
    public javax.swing.JSeparator passwordResultTitleSeparator;
    public javax.swing.JTextArea resultsPasswords;
    public javax.swing.JScrollPane resultsScrollPane;
    // End of variables declaration//GEN-END:variables
    
    public String getFreeCharacters() {
        return this.freeCharactersTextField.getText();
    }
    public void setFreeCharacters(String newString ) {
        this.freeCharactersTextField.setText( newString );
    }
    public Integer getNumberOfCharacters() {
        return (Integer)this.numberOfCharactersSpinner.getValue();
    }
    public void setNumberOfCharacters( Integer newInteger ) {
        this.numberOfCharactersSpinner.setValue( newInteger );
    }
    
    private transient RandomPasswordSuggestioner randomPasswordSuggestioner;
    private RandomPasswordSuggestioner getRandomPasswordSuggestioner() {
        if (this.randomPasswordSuggestioner == null) {
            this.randomPasswordSuggestioner = new RandomPasswordSuggestioner();
        }
        return this.randomPasswordSuggestioner;
    }
}
