package org.huberb.randompassword;

import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectStreamException;
import org.huberb.randompassword.ui.RandomPasswordPanel;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.util.io.NbMarshalledObject;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the random password suggestion window.
 */
final class RandomPasswordTopComponent extends TopComponent {
    
    private static final long serialVersionUID = 1L;
    
    private static RandomPasswordTopComponent instance;
    
    private RandomPasswordPanel randomPasswordPanel;
    
    private RandomPasswordTopComponent() {
        initComponents();
        
        randomPasswordPanel = new RandomPasswordPanel();
        this.add( randomPasswordPanel );
        
        setName(NbBundle.getMessage(RandomPasswordTopComponent.class, "CTL_RandomPasswordTopComponent"));
        setToolTipText(NbBundle.getMessage(RandomPasswordTopComponent.class, "HINT_RandomPasswordTopComponent"));
//        setIcon(Utilities.loadImage("SET/PATH/TO/ICON/HERE", true));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setLayout(new java.awt.BorderLayout());

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Don't use directly, it reserved for '.settings' file only,
     * i.e. deserialization routines, otherwise you can get non-deserialized instance.
     */
    public static synchronized RandomPasswordTopComponent getDefault() {
        if (instance == null) {
            instance = new RandomPasswordTopComponent();
        }
        return instance;
    }
    private static synchronized void setDefault( RandomPasswordTopComponent newInstance) {
        if (instance == null) {
            instance = newInstance;
        }
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    protected String preferredID() {
        return "RandomPasswordTopComponent";
    }
    
//    /** replaces this in object stream */
//    public Object writeReplace() {
//        return new ResolvableHelper();
//    }
//
//    final static class ResolvableHelper implements Serializable {
//        private static final long serialVersionUID = 1L;
//        public Object readResolve() {
//            return RandomPasswordTopComponent.getDefault();
//        }
//    }
    
    //-------------------------------------------------------------
    // state serialization
    //-------------------------------------------------------------
    public Object readResolve() throws ObjectStreamException {
        setDefault( this );
        return getDefault();
    }
    
    public void writeExternal(ObjectOutput oo) throws IOException {
        super.writeExternal(oo);
        
        final Object[] state = new Object[] {
            this.randomPasswordPanel.getFreeCharacters(),
            this.randomPasswordPanel.getNumberOfCharacters(),
        };
        Object writeObject;
        
        try {
            writeObject = new NbMarshalledObject(state);
        } catch (Exception e) {
            ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            writeObject = null;
        }
        oo.writeObject(writeObject);
    }
    
    public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
        super.readExternal(oi);
        
        final NbMarshalledObject readObject =(NbMarshalledObject)oi.readObject();
        if (readObject != null) {
            try {
                final Object[] state = (Object[])readObject.get();
                
                final String newFreeCharacters = (String) state[0];
                final Integer newNumberOfCharacters = (Integer) state[1];
                if (state.length > 0) {
                    this.randomPasswordPanel.setFreeCharacters( newFreeCharacters );
                    this.randomPasswordPanel.setNumberOfCharacters( newNumberOfCharacters );
                }                
            } catch (Exception e) {
                ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            }
        }
    }
}
