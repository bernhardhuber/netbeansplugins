package org.huberb.jdepend.options;

import javax.swing.DefaultListModel;
import org.openide.filesystems.FileObject;

final class JDependPanel extends javax.swing.JPanel {
    
    private final JDependOptionsPanelController controller;
    
    JDependPanel(JDependOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        ReenderOptionPanel = new javax.swing.JPanel();
        xsltLabel = new javax.swing.JLabel();
        xsltForReenderingComboBox = new javax.swing.JComboBox();
        JDependOptionPanel = new javax.swing.JPanel();
        analyzeInnerClassesCheckBox = new javax.swing.JCheckBox();
        filterPackageLabel = new javax.swing.JLabel();
        filterPackageTextField = new javax.swing.JTextField();
        addFilterPackageButton = new javax.swing.JButton();
        removeFilterPackageButton = new javax.swing.JButton();
        filterPackagesScrollPane = new javax.swing.JScrollPane();
        filterPackagesList = new javax.swing.JList();
        defaultFilterPackageButton = new javax.swing.JButton();

        setBackground(java.awt.SystemColor.window);
        ReenderOptionPanel.setBackground(java.awt.Color.white);
        ReenderOptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JDependPanel.class, "TTL_ReenderOptionPanel"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(xsltLabel, org.openide.util.NbBundle.getMessage(JDependPanel.class, "LBL_REENDER_XSLT")); // NOI18N

        xsltForReenderingComboBox.setModel(new XsltFileObjectComboBoxModel());

        org.jdesktop.layout.GroupLayout ReenderOptionPanelLayout = new org.jdesktop.layout.GroupLayout(ReenderOptionPanel);
        ReenderOptionPanel.setLayout(ReenderOptionPanelLayout);
        ReenderOptionPanelLayout.setHorizontalGroup(
            ReenderOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ReenderOptionPanelLayout.createSequentialGroup()
                .add(xsltLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(xsltForReenderingComboBox, 0, 160, Short.MAX_VALUE)
                .addContainerGap())
        );
        ReenderOptionPanelLayout.setVerticalGroup(
            ReenderOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ReenderOptionPanelLayout.createSequentialGroup()
                .add(ReenderOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(xsltLabel)
                    .add(xsltForReenderingComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JDependOptionPanel.setBackground(new java.awt.Color(255, 255, 255));
        JDependOptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JDependPanel.class, "TTL_JDependOptionPanel"))); // NOI18N
        analyzeInnerClassesCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(analyzeInnerClassesCheckBox, org.openide.util.NbBundle.getMessage(JDependPanel.class, "CKB_AnalyzeInnerClasses")); // NOI18N
        analyzeInnerClassesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        analyzeInnerClassesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        filterPackageLabel.setLabelFor(filterPackageTextField);
        org.openide.awt.Mnemonics.setLocalizedText(filterPackageLabel, "&Filter Packages");

        org.openide.awt.Mnemonics.setLocalizedText(addFilterPackageButton, org.openide.util.NbBundle.getMessage(JDependPanel.class, "BTN_Add")); // NOI18N
        addFilterPackageButton.setToolTipText(org.openide.util.NbBundle.getMessage(JDependPanel.class, "TTP_Add")); // NOI18N
        addFilterPackageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleAddFilterPackage(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeFilterPackageButton, org.openide.util.NbBundle.getMessage(JDependPanel.class, "BTN_Remove")); // NOI18N
        removeFilterPackageButton.setToolTipText(org.openide.util.NbBundle.getMessage(JDependPanel.class, "TTP_Remove")); // NOI18N
        removeFilterPackageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleRemoveFilterPackage(evt);
            }
        });

        filterPackagesList.setModel(new DefaultListModel());
        filterPackagesScrollPane.setViewportView(filterPackagesList);

        org.openide.awt.Mnemonics.setLocalizedText(defaultFilterPackageButton, org.openide.util.NbBundle.getMessage(JDependPanel.class, "BTN_Restore Default Filter Packages")); // NOI18N
        defaultFilterPackageButton.setToolTipText(org.openide.util.NbBundle.getMessage(JDependPanel.class, "TTP_Default")); // NOI18N
        defaultFilterPackageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleDefaultFilterPackage(evt);
            }
        });

        org.jdesktop.layout.GroupLayout JDependOptionPanelLayout = new org.jdesktop.layout.GroupLayout(JDependOptionPanel);
        JDependOptionPanel.setLayout(JDependOptionPanelLayout);
        JDependOptionPanelLayout.setHorizontalGroup(
            JDependOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(JDependOptionPanelLayout.createSequentialGroup()
                .add(JDependOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(JDependOptionPanelLayout.createSequentialGroup()
                        .add(JDependOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(analyzeInnerClassesCheckBox)
                            .add(filterPackagesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(JDependOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(addFilterPackageButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                            .add(defaultFilterPackageButton)
                            .add(removeFilterPackageButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(JDependOptionPanelLayout.createSequentialGroup()
                        .add(filterPackageLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(filterPackageTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)))
                .addContainerGap())
        );

        JDependOptionPanelLayout.linkSize(new java.awt.Component[] {addFilterPackageButton, defaultFilterPackageButton, removeFilterPackageButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        JDependOptionPanelLayout.setVerticalGroup(
            JDependOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(JDependOptionPanelLayout.createSequentialGroup()
                .add(analyzeInnerClassesCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(JDependOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(filterPackageLabel)
                    .add(filterPackageTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(JDependOptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(JDependOptionPanelLayout.createSequentialGroup()
                        .add(addFilterPackageButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeFilterPackageButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(defaultFilterPackageButton))
                    .add(filterPackagesScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ReenderOptionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(JDependOptionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(JDependOptionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ReenderOptionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void handleDefaultFilterPackage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleDefaultFilterPackage
        
        final DefaultListModel dlm = (DefaultListModel)this.filterPackagesList.getModel();
        final JDependSettings settings = JDependSettings.getDefault();
        
        final String []defaultFilterPackages = settings.getDefaultFilterPackages();
        dlm.clear();
        for (int i = 0; i < defaultFilterPackages.length; i++ ) {
            String defaultFilterPackage = defaultFilterPackages[i];
            dlm.addElement( defaultFilterPackage );
        }
        
    }//GEN-LAST:event_handleDefaultFilterPackage
    
    private void handleRemoveFilterPackage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleRemoveFilterPackage
        
        // TODO enable/disable removeFilterPackageButton
        
        final int selectedIndex = this.filterPackagesList.getSelectedIndex();
        final DefaultListModel dlm = (DefaultListModel)this.filterPackagesList.getModel();
        if (selectedIndex >= 0 && selectedIndex < dlm.getSize()) {
            final String filterPackage = (String)dlm.remove( selectedIndex );
            if (filterPackage != null && filterPackage.length() > 0) {
                this.filterPackageTextField.setText( filterPackage ) ;
            }
        }
        
    }//GEN-LAST:event_handleRemoveFilterPackage
    
    private void handleAddFilterPackage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleAddFilterPackage
        
        final DefaultListModel dlm = (DefaultListModel)this.filterPackagesList.getModel();
        final String filterPackage = this.filterPackageTextField.getText();
        
        // Avoid duplicates
        boolean filterPackageIsAlreadyDefined = false;
        for (int i = 0; !filterPackageIsAlreadyDefined && i < dlm.getSize(); i++ ) {
            filterPackageIsAlreadyDefined = filterPackage.equals( dlm.get(i) );
        }
        if (!filterPackageIsAlreadyDefined) {
            if (filterPackage != null && filterPackage.length() > 0) {
                dlm.addElement( filterPackage );
            }
        }
        
        // clear the text field
        this.filterPackageTextField.setText( "" );
        
    }//GEN-LAST:event_handleAddFilterPackage
    
    void load() {
        
        // Read settings and initialize GUI
        final JDependSettings settings = JDependSettings.getDefault();
        
        this.analyzeInnerClassesCheckBox.setSelected( settings.getAnalyzerInnerClasses().booleanValue() );
        
        final DefaultListModel dlm = (DefaultListModel)this.filterPackagesList.getModel();
        dlm.clear();
        final String []filterPackages = settings.getFilterPackages();
        for (int i = 0; i < filterPackages.length; i++ ) {
            final String filterPackage = filterPackages[i];
            dlm.addElement( filterPackage );
        }
        
        final XsltFileObjectComboBoxModel xsltListModel = (XsltFileObjectComboBoxModel) this.xsltForReenderingComboBox.getModel();
        xsltListModel.refresh();
        
        final FileObject fo = settings.getXsltFileObject();
        if (fo != null) {
            final LabelFileObjectBean lfob = new LabelFileObjectBean( fo );
            this.xsltForReenderingComboBox.setSelectedItem( lfob );
        }
    }
    
    void store() {
        // Store modified settings
        final JDependSettings settings = JDependSettings.getDefault();
        
        settings.setAnalyzerInnerClasses( Boolean.valueOf( this.analyzeInnerClassesCheckBox.isSelected() ) );
        
        final DefaultListModel dlm = (DefaultListModel)this.filterPackagesList.getModel();
        final String[] filterPackages = new String[dlm.getSize()];
        for (int i = 0; i < filterPackages.length; i++ ) {
            filterPackages[i] = (String)dlm.get(i);
            
        }
        settings.setFilterPackages( filterPackages );
        
        final LabelFileObjectBean lfob = (LabelFileObjectBean)this.xsltForReenderingComboBox.getSelectedItem();
        settings.setXsltFileObject( lfob.getFileObject() );
    }
    
    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JDependOptionPanel;
    private javax.swing.JPanel ReenderOptionPanel;
    private javax.swing.JButton addFilterPackageButton;
    private javax.swing.JCheckBox analyzeInnerClassesCheckBox;
    private javax.swing.JButton defaultFilterPackageButton;
    private javax.swing.JLabel filterPackageLabel;
    private javax.swing.JTextField filterPackageTextField;
    private javax.swing.JList filterPackagesList;
    private javax.swing.JScrollPane filterPackagesScrollPane;
    private javax.swing.JButton removeFilterPackageButton;
    private javax.swing.JComboBox xsltForReenderingComboBox;
    private javax.swing.JLabel xsltLabel;
    // End of variables declaration//GEN-END:variables
    
}
