package org.huber.keytool.settings;

import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;
import org.huber.keytool.ui.wizard.genkey.LabelKeyAlgCertAlgBean;
import org.huber.keytool.ui.wizard.genkey.LabelKeyAlgCertAlgBeanFactory;

final class KeytoolPanel extends javax.swing.JPanel {
    
    private final KeytoolOptionsPanelController controller;
    
    KeytoolPanel(KeytoolOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        this.minPasswordLengthSpinner.setModel(createNumberSpinnerModel(6,0,Integer.MAX_VALUE,1));
        this.defaultKeyValidityLabelSpinner.setModel(createNumberSpinnerModel(90,1,Integer.MAX_VALUE,1));
        
        DefaultComboBoxModel aModel = new DefaultComboBoxModel(LabelKeyAlgCertAlgBeanFactory.createLabelKeyAlgCertAlgBeans());
        this.defaultGenKeyAlgorithmComboBox.setModel(aModel);
        
        DefaultComboBoxModel bModel = new DefaultComboBoxModel(LabelKeyAlgCertAlgBeanFactory.createLabelKeyAlgCertAlgBeans());
        this.defaultCSRAlgorithmComboBox.setModel(bModel);
        
        // TODO listen to changes in form fields and call controller.changed()
    }
    
    private SpinnerNumberModel createNumberSpinnerModel(int v, int ma, int mi, int s) {
        final Integer value = Integer.valueOf(v);
        final Integer min = Integer.valueOf(ma);
        final Integer max = Integer.valueOf(mi);
        final Integer step = Integer.valueOf(s);
        
        SpinnerNumberModel sm = new SpinnerNumberModel(value, min, max, step);
        return sm;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        minPasswordLengthLabel = new javax.swing.JLabel();
        minPasswordLengthSpinner = new javax.swing.JSpinner();
        defaultKeyValidityLabel = new javax.swing.JLabel();
        defaultKeyValidityLabelSpinner = new javax.swing.JSpinner();
        defaultGenKeyAlgorithmLabel = new javax.swing.JLabel();
        defaultCSRAlgorithmLabel = new javax.swing.JLabel();
        defaultGenKeyAlgorithmComboBox = new javax.swing.JComboBox();
        defaultCSRAlgorithmComboBox = new javax.swing.JComboBox();

        setBackground(java.awt.Color.white);
        minPasswordLengthLabel.setLabelFor(minPasswordLengthSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(minPasswordLengthLabel, org.openide.util.NbBundle.getMessage(KeytoolPanel.class, "KeytoolPanel.minPasswordLengthLabel.text")); // NOI18N

        defaultKeyValidityLabel.setLabelFor(defaultKeyValidityLabelSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(defaultKeyValidityLabel, org.openide.util.NbBundle.getMessage(KeytoolPanel.class, "KeytoolPanel.defaultKeyValidityLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(defaultGenKeyAlgorithmLabel, org.openide.util.NbBundle.getMessage(KeytoolPanel.class, "KeytoolPanel.defaultGenKeyAlgorithmLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(defaultCSRAlgorithmLabel, org.openide.util.NbBundle.getMessage(KeytoolPanel.class, "KeytoolPanel.defaultCSRAlgorithmLabel.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(defaultCSRAlgorithmLabel)
                    .add(defaultGenKeyAlgorithmLabel)
                    .add(minPasswordLengthLabel)
                    .add(defaultKeyValidityLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(minPasswordLengthSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                        .add(defaultKeyValidityLabelSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                    .add(defaultGenKeyAlgorithmComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(defaultCSRAlgorithmComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(minPasswordLengthLabel)
                    .add(minPasswordLengthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(defaultKeyValidityLabel)
                    .add(defaultKeyValidityLabelSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(defaultGenKeyAlgorithmLabel)
                    .add(defaultGenKeyAlgorithmComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(defaultCSRAlgorithmLabel)
                    .add(defaultCSRAlgorithmComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    void load() {
        // read settings and initialize GUI
        
        final KeytoolSettings settings = KeytoolSettings.getDefault();
        
        Integer minPasswordLength = settings.getMinPasswordLength();
        this.minPasswordLengthSpinner.setValue( minPasswordLength );
        
        Integer defaultKeyValidity = settings.getDefaultKeyValidityInDays();
        this.defaultKeyValidityLabelSpinner.setValue( defaultKeyValidity );
        
        LabelKeyAlgCertAlgBean v1 = settings.getDefaultGenKeyAlgorithm();
        this.defaultGenKeyAlgorithmComboBox.setSelectedItem( v1 );
        
        LabelKeyAlgCertAlgBean v2 = settings.getDefaultCSRAlgorithm();
        this.defaultCSRAlgorithmComboBox.setSelectedItem( v2 );
    }
    
    void store() {
        // store modified settings
        
        final KeytoolSettings settings = KeytoolSettings.getDefault();
        
        Integer minPasswordLength = (Integer)this.minPasswordLengthSpinner.getValue();
        settings.setMinPasswordLength( minPasswordLength );
        
        Integer defaultKeyValidity = (Integer)this.defaultKeyValidityLabelSpinner.getValue( );
        settings.setDefaultKeyValidityInDays(defaultKeyValidity);
        
        LabelKeyAlgCertAlgBean v1 = (LabelKeyAlgCertAlgBean) this.defaultGenKeyAlgorithmComboBox.getSelectedItem();
        settings.setDefaultGenKeyAlgorithm(v1);
        
        LabelKeyAlgCertAlgBean v2 = (LabelKeyAlgCertAlgBean) this.defaultCSRAlgorithmComboBox.getSelectedItem();
        settings.setDefaultCSRAlgorithm(v2);
    }
    
    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox defaultCSRAlgorithmComboBox;
    private javax.swing.JLabel defaultCSRAlgorithmLabel;
    private javax.swing.JComboBox defaultGenKeyAlgorithmComboBox;
    private javax.swing.JLabel defaultGenKeyAlgorithmLabel;
    private javax.swing.JLabel defaultKeyValidityLabel;
    private javax.swing.JSpinner defaultKeyValidityLabelSpinner;
    private javax.swing.JLabel minPasswordLengthLabel;
    private javax.swing.JSpinner minPasswordLengthSpinner;
    // End of variables declaration//GEN-END:variables
    
}
