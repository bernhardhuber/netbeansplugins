package org.huber.keytool.ui.wizard.newkeystore;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.huber.keytool.ui.filefilter.KeyStoreFileFilterFactory;
import org.huber.keytool.ui.wizard.ChangeObserverOfWizardPanel;
import org.huber.keytool.ui.wizard.ObserverablePanel;
import org.openide.util.NbBundle;

public final class SelectKeyStorePanel extends JPanel implements ObserverablePanel {
    //private FileFilter keyStoreFileFilter;
    
    /** Creates new form LoadKeyStoreVisualPanel1 */
    public SelectKeyStorePanel() {
        initComponents();
        
        //this.keyStoreFileFilter = new KeyStoreFilter();
    }
    
    
    public String getName() {
        return org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "NAME_SelectKeyStorePanel");
    }
    
    public void bind(ChangeObserverOfWizardPanel changeObserver) {
        final String[] propertyNames = new String[] {
            JFileChooser.SELECTED_FILES_CHANGED_PROPERTY,
            JFileChooser.SELECTED_FILE_CHANGED_PROPERTY
        };
        
        changeObserver.bindDocumentListener( this.keystoreFileTextField.getDocument() );
    }
    
    public ObserverablePanel.ValidUserEntryResult isValidUserEntry() {
        ObserverablePanel.ValidUserEntryResult vuer = new ObserverablePanel.ValidUserEntryResult();
        
        boolean isValid = true;
        final String selectedFileAsString = this.keystoreFileTextField.getText();
        isValid = isValid && selectedFileAsString != null;
        isValid = isValid && selectedFileAsString.length() > 0;
        if (!isValid) {
            final String msg = NbBundle.getMessage( SelectKeyStorePanel.class, "ERR_SELECT_KEYSTORE_FILE" );
            vuer.setInvalidMessage( msg );
            return vuer;
        }
        
        final File selectedFile = new File(selectedFileAsString);
        isValid = isValid && selectedFile != null;
        if (!isValid) {
            final String msg = NbBundle.getMessage( SelectKeyStorePanel.class, "ERR_SELECT_KEYSTORE_FILE" );
            vuer.setInvalidMessage( msg );
            return vuer;
        }
        isValid = isValid && !selectedFile.exists();
        if (!isValid) {
            final String msg = NbBundle.getMessage( SelectKeyStorePanel.class, "ERR_SELECTED_KEYSTORE_DOES_EXIST" );
            vuer.setInvalidMessage( msg );
            return vuer;
        }
        return vuer;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        keystoreFileLabel = new javax.swing.JLabel();
        keystoreFileTextField = new javax.swing.JTextField();
        keystoreFileButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(keystoreFileLabel, "Keystore File");

        org.openide.awt.Mnemonics.setLocalizedText(keystoreFileButton, "Select Keystore File...");
        keystoreFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keystoreFileButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(keystoreFileLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(keystoreFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(keystoreFileButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(keystoreFileLabel)
                    .add(keystoreFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(keystoreFileButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void keystoreFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keystoreFileButtonActionPerformed

        final JFileChooser jfc = new JFileChooser();
        jfc.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        //jfc.addChoosableFileFilter( keyStoreFileFilter );
        KeyStoreFileFilterFactory.addChoosableFileFilter( jfc );
        jfc.setCurrentDirectory( this.currentDirectory );
        int rc = jfc.showSaveDialog( this );
        if (rc == JFileChooser.APPROVE_OPTION) {
            final File selectedFile = jfc.getSelectedFile();
            this.keystoreFileTextField.setText( selectedFile.toString() );
        }
    }//GEN-LAST:event_keystoreFileButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton keystoreFileButton;
    private javax.swing.JLabel keystoreFileLabel;
    private javax.swing.JTextField keystoreFileTextField;
    // End of variables declaration//GEN-END:variables
    
    public void reset() {
    }
    
    
    File getSelectedFile() {
        File selectedFile = new File(this.keystoreFileTextField.getText());
        return selectedFile;
        //return this.keyStoreFileChooser.getSelectedFile();
    }
    private File currentDirectory = null;
    
    void setCurrentDirectoryOrFilecurrentDirectoryOrFile(String currentDirectoryOrFilecurrentDirectoryOrFile) {
        if (currentDirectoryOrFilecurrentDirectoryOrFile != null) {
            //this.keyStoreFileChooser.setCurrentDirectory( new File( currentDirectoryOrFilecurrentDirectoryOrFile ) );
            this.currentDirectory = new File( currentDirectoryOrFilecurrentDirectoryOrFile );
        }
    }

}

