/*
 * EnterKeyStorePasswordPanel.java
 *
 * Created on 22. Februar 2006, 22:28
 */

package org.huber.keytool.ui.wizard.newkeystore;

import org.huber.keytool.settings.KeytoolSettings;
import org.huber.keytool.ui.wizard.ChangeObserverOfWizardPanel;
import org.huber.keytool.ui.wizard.ObserverablePanel;
import org.openide.util.NbBundle;

/**
 *
 * @author  HuberB1
 */
public class EnterKeyStorePasswordPanel extends javax.swing.JPanel implements ObserverablePanel {
    
    /**
     * Creates new form EnterKeyStorePasswordPanel
     */
    public EnterKeyStorePasswordPanel() {
        initComponents();
    }
    
    public String getName() {
        return org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "NAME_EnterKeyStorePasswordPanel");
    }
    
    public void bind(ChangeObserverOfWizardPanel changeObserver) {
        changeObserver.bindDocumentListener( this.keyStorePasswordField.getDocument() );
        changeObserver.bindDocumentListener( this.keyStorePasswordRetypedField.getDocument() );
    }
    
    public ValidUserEntryResult isValidUserEntry() {
        boolean isValid = true;
        final ObserverablePanel.ValidUserEntryResult vuer = new ObserverablePanel.ValidUserEntryResult();
        
        KeytoolSettings keytoolSettings = KeytoolSettings.getDefault();
        final int MIN_LENGTH = keytoolSettings.getMinPasswordLength();
        
        isValid = isValid && checkPasswordLength(MIN_LENGTH);
        if (!isValid) {        
            final String msg = NbBundle.getMessage( EnterKeyStorePasswordPanel.class, "ERR_INVALID_STORE_PASSWORD_LENGTH", Integer.valueOf(MIN_LENGTH) );
            vuer.setInvalidMessage( msg );
            return vuer;
        }
        isValid = isValid && checkPasswordFields();
        if (!isValid) {
            final String msg = NbBundle.getMessage( EnterKeyStorePasswordPanel.class, "ERR_MISMATHC_STORE_PASSWORD" );
            vuer.setInvalidMessage( msg );
            return vuer;
        }
        return vuer;
    }
    
    private boolean checkPasswordLength(int minLength) {
        boolean isValid = true;
        
        isValid = isValid && (this.keyStorePasswordField.getPassword().length == 0 || this.keyStorePasswordField.getPassword().length >= minLength);
        isValid = isValid && (this.keyStorePasswordRetypedField.getPassword().length == 0 || this.keyStorePasswordRetypedField.getPassword().length >= minLength);
        return isValid;
    }
    
    private boolean checkPasswordFields() {
        final char[] pw1 = this.keyStorePasswordField.getPassword();
        final char[] pw2 = this.keyStorePasswordRetypedField.getPassword();
        
        boolean checkPasswordFields = true;
        
        checkPasswordFields = checkPasswordFields && pw1 != null;
        checkPasswordFields = checkPasswordFields && pw2 != null;
        checkPasswordFields = checkPasswordFields && pw1.length == pw2.length;
        for (int i = 0; checkPasswordFields && i < pw1.length; i++ ) {
            checkPasswordFields = checkPasswordFields && pw1[i] == pw2[i];
        }
        
        return checkPasswordFields;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        keyStoreFileTextField = new javax.swing.JTextField();
        keyStorePasswordField = new javax.swing.JPasswordField();
        keyStorePasswordRetypedField = new javax.swing.JPasswordField();

        jLabel1.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "IDX_KeyStoreFile")));
        jLabel1.setLabelFor(keyStoreFileTextField);
        jLabel1.setText(org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "LBL_KeyStoreFile"));

        jLabel2.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "IDX_KeyStorePassword")));
        jLabel2.setLabelFor(keyStorePasswordField);
        jLabel2.setText(org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "LBL_KeyStorePassword"));

        jLabel3.setDisplayedMnemonic(Integer.parseInt(org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "IDX_KeyStorePasswordRetyped")));
        jLabel3.setText(org.openide.util.NbBundle.getMessage(EnterKeyStorePasswordPanel.class, "LBL_KeyStorePasswordRetype"));

        keyStoreFileTextField.setEditable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(keyStoreFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .add(keyStorePasswordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .add(keyStorePasswordRetypedField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(keyStoreFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(keyStorePasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(keyStorePasswordRetypedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField keyStoreFileTextField;
    private javax.swing.JPasswordField keyStorePasswordField;
    private javax.swing.JPasswordField keyStorePasswordRetypedField;
    // End of variables declaration//GEN-END:variables
    
    private final static String EMPTY_STRING = "";
    
    void setSelectedKeyStoreFile( String selectedKeyStoreFile ) {
        this.keyStoreFileTextField.setText( selectedKeyStoreFile );
        this.keyStorePasswordField.setText(EMPTY_STRING );
        this.keyStorePasswordRetypedField.setText(EMPTY_STRING );
    }
    String getSelectedKeyStoreFile() {
        return this.keyStoreFileTextField.getText( );
    }
    char[] getKeyStorePassword() {
        return this.keyStorePasswordField.getPassword();
    }
    
    public void reset() {
        this.keyStoreFileTextField.setText(EMPTY_STRING);
        this.keyStorePasswordField.setText(EMPTY_STRING);
        this.keyStorePasswordRetypedField.setText(EMPTY_STRING);
    }
}
