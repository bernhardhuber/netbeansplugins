package org.huber.keytool.ui.wizard.storepasswd;

import java.io.File;
import javax.swing.JPanel;
import org.huber.keytool.ui.wizard.ChangeObserverOfWizardPanel;
import org.huber.keytool.ui.wizard.ObserverablePanel;
import org.openide.util.NbBundle;

public final class StorePasswordVisualPanel1 extends JPanel implements ObserverablePanel {
    
    /** Creates new form StorePasswordVisualPanel1 */
    public StorePasswordVisualPanel1() {
        initComponents();
    }
    
    public String getName() {
        return NbBundle.getMessage( StorePasswordVisualPanel1.class, "NAME_StorePasswordVisualPanel1" );
    }

    public void bind(ChangeObserverOfWizardPanel changeObserver) {
        changeObserver.bindChangeListener( this.storeFileNameConfirmedCheckBox );
    }
    
    public ObserverablePanel.ValidUserEntryResult isValidUserEntry() {
        ObserverablePanel.ValidUserEntryResult  vuer = new ObserverablePanel.ValidUserEntryResult();
        boolean isValid = true; 
        
        isValid = isValid && this.storeFileNameConfirmedCheckBox.isSelected();
        if (!isValid) {
            final String msg = NbBundle.getMessage( StorePasswordVisualPanel1.class, "ERR_SELECT_STORE_FILE_NAME_CONFIRM_OK");
            vuer.setInvalidMessage( msg );
        }
        return vuer;
    }
    public void reset() {
        this.storeFileNameConfirmedCheckBox.setSelected(false);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        storeFileNameConfirmedCheckBox = new javax.swing.JCheckBox();
        storeFileNameTextField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Store File Name");

        org.openide.awt.Mnemonics.setLocalizedText(storeFileNameConfirmedCheckBox, "Store File Name confirmed");
        storeFileNameConfirmedCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        storeFileNameConfirmedCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        storeFileNameTextField.setEditable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(storeFileNameConfirmedCheckBox)
                    .add(storeFileNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(storeFileNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(storeFileNameConfirmedCheckBox)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void setCurrentDirectoryOrFilecurrentDirectoryOrFile(String storeFileName ) {
       this.storeFileNameTextField.setText( storeFileName );
    }

    File getSelectedFile() {
        final File selectedFile = new File( this.storeFileNameTextField.getText() );
        return selectedFile;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox storeFileNameConfirmedCheckBox;
    private javax.swing.JTextField storeFileNameTextField;
    // End of variables declaration//GEN-END:variables
    
}

