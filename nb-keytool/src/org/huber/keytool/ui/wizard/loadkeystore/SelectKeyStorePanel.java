package org.huber.keytool.ui.wizard.loadkeystore;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import org.huber.keytool.KeyStoreBeanHistory;
import org.huber.keytool.model.KeyStoreBean;
import org.huber.keytool.model.LabelValueBean;
import org.huber.keytool.ui.filefilter.KeyStoreFileFilterFactory;
import org.huber.keytool.ui.wizard.ChangeObserverOfWizardPanel;
import org.huber.keytool.ui.wizard.ObserverablePanel;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
import org.openide.util.NbBundle;

public final class SelectKeyStorePanel extends JPanel implements ObserverablePanel {
    //private FileFilter keyStoreFileFilter;
    
    /** Creates new form LoadKeyStoreVisualPanel1 */
    public SelectKeyStorePanel() {
        initComponents();
        
        //this.keyStoreFileFilter = new KeyStoreFilter();
        KeyStoreFileFilterFactory.addChoosableFileFilter( this.keyStoreFileChooser );
    }
    
    
    public String getName() {
        return NbBundle.getMessage(SelectKeyStorePanel.class, "NAME_SelectKeyStorePanel");
    }
    
    public void bind(ChangeObserverOfWizardPanel changeObserver) {
        changeObserver.bindPropertyChangeListener( this.keyStoreFileChooser );
    }
    
    public ObserverablePanel.ValidUserEntryResult isValidUserEntry() {
        final ObserverablePanel.ValidUserEntryResult  vuer = new ObserverablePanel.ValidUserEntryResult();
        boolean isValid = true;
        
        final File selectedFile = this.keyStoreFileChooser.getSelectedFile();
        
        isValid = isValid && selectedFile != null;
        isValid = isValid && selectedFile.isFile();
        isValid = isValid && selectedFile.canRead();
        if (!isValid) {
            final String msg = NbBundle.getMessage( SelectKeyStorePanel.class, "ERR_SELECT_VALID_KEY_STORE_FILE" );
            vuer.setInvalidMessage( msg );
            return vuer;
        }
        
        return vuer;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        keyStoreFileChooser = new JFileChooser();
        historyPanel = new JPanel();
        previousLabel = new JLabel();
        previousComboBox = new JComboBox();
        separator1 = new JSeparator();

        setLayout(new BorderLayout());

        keyStoreFileChooser.setControlButtonsAreShown(false);
        add(keyStoreFileChooser, BorderLayout.CENTER);

        previousLabel.setDisplayedMnemonic(Integer.parseInt(NbBundle.getMessage(SelectKeyStorePanel.class, "IDX_PreviousKeyStores")));
        previousLabel.setLabelFor(previousComboBox);
        previousLabel.setText(NbBundle.getMessage(SelectKeyStorePanel.class, "LBL_PreviousKeyStores"));

        previousComboBox.setModel(new DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        previousComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                previousComboBoxActionPerformed(evt);
            }
        });

        GroupLayout historyPanelLayout = new GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(GroupLayout.LEADING)
            .add(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(historyPanelLayout.createParallelGroup(GroupLayout.LEADING)
                    .add(separator1, GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .add(historyPanelLayout.createSequentialGroup()
                        .add(previousLabel)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(previousComboBox, 0, 262, Short.MAX_VALUE)))
                .addContainerGap())
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(GroupLayout.LEADING)
            .add(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(historyPanelLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(previousLabel)
                    .add(previousComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(separator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE))
        );
        add(historyPanel, BorderLayout.NORTH);

    }// </editor-fold>//GEN-END:initComponents
    
    private void previousComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_previousComboBoxActionPerformed
        Object source = evt.getSource();
        if (source instanceof JComboBox) {
            JComboBox jcb = (JComboBox)source;
            Object selectedItem = jcb.getSelectedItem();
            if (selectedItem != null && selectedItem instanceof LabelValueBean) {
                final LabelValueBean<KeyStoreBean> lvb = (LabelValueBean<KeyStoreBean>)selectedItem;
                final KeyStoreBean ksb = lvb.getValue();
                if (ksb != null && ksb.getName() != null) {
                    final String name = ksb.getName();
                    keyStoreFileChooser.setSelectedFile(new File(name));
                }
            }
        }
        
    }//GEN-LAST:event_previousComboBoxActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel historyPanel;
    private JFileChooser keyStoreFileChooser;
    private JComboBox previousComboBox;
    private JLabel previousLabel;
    private JSeparator separator1;
    // End of variables declaration//GEN-END:variables
    
    public void reset() {
    }

    void setSelectedFile(File selectedFile) {
        this.keyStoreFileChooser.setSelectedFile( selectedFile );
    }
    
    File getSelectedFile() {
        return this.keyStoreFileChooser.getSelectedFile();
    }
    
    void setCurrentDirectoryOrFilecurrentDirectoryOrFile(String currentDirectoryOrFilecurrentDirectoryOrFile) {
        if (currentDirectoryOrFilecurrentDirectoryOrFile != null) {
            this.keyStoreFileChooser.setCurrentDirectory( new File( currentDirectoryOrFilecurrentDirectoryOrFile ) );
        }
    }
    
    public void setPreviousComboBox(KeyStoreBeanHistory ksbh) {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel)this.previousComboBox.getModel();
        dcbm.removeAllElements();
        final List<LabelValueBean<KeyStoreBean>> l = ksbh.getHistory();
        for (LabelValueBean<KeyStoreBean> lvb : l) {
            dcbm.addElement(lvb);
        }
        this.previousComboBox.setEnabled( dcbm.getSize() > 0 );
    }
    
}

