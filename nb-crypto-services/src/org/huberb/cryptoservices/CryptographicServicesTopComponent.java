package org.huberb.cryptoservices;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.Serializable;
import java.util.Arrays;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;

import org.huberb.cryptoservices.helper.CryptographicServices;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class CryptographicServicesTopComponent extends TopComponent {
    
    private static final long serialVersionUID = 1L;
    
    private static CryptographicServicesTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    
    private static final String PREFERRED_ID = "CryptographicServicesTopComponent";
    
    private CryptographicServicesTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(CryptographicServicesTopComponent.class, "CTL_CryptographicServicesTopComponent"));
        setToolTipText(NbBundle.getMessage(CryptographicServicesTopComponent.class, "HINT_CryptographicServicesTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }
    
    private DefaultComboBoxModel getServiceTypes() {
        final String []serviceTypes = CryptographicServices.getServiceTypes();
        Arrays.sort( serviceTypes );
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel(serviceTypes);
        return dcbm;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        serviceTypesLabel = new JLabel();
        servicesTypesComboBox = new JComboBox();
        cryptoImplsScrollPane = new JScrollPane();
        cryptoImplsTextArea = new JTextArea();
        jLabel1 = new JLabel();
        jSeparator1 = new JSeparator();

        serviceTypesLabel.setDisplayedMnemonic(Integer.parseInt(NbBundle.getMessage(CryptographicServicesTopComponent.class, "IDX_ServiceTypes")));
        serviceTypesLabel.setLabelFor(servicesTypesComboBox);
        serviceTypesLabel.setText(NbBundle.getMessage(CryptographicServicesTopComponent.class, "LBL_ServiceTypes"));

        servicesTypesComboBox.setModel(getServiceTypes());
        servicesTypesComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                servicesTypesComboBoxActionPerformed(evt);
            }
        });

        cryptoImplsTextArea.setColumns(20);
        cryptoImplsTextArea.setEditable(false);
        cryptoImplsTextArea.setRows(5);
        cryptoImplsTextArea.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                cryptoImplsKeyPressedHandler(evt);
            }
        });

        cryptoImplsScrollPane.setViewportView(cryptoImplsTextArea);

        jLabel1.setDisplayedMnemonic(Integer.parseInt(NbBundle.getMessage(CryptographicServicesTopComponent.class, "IDX_CryptoImpls")));
        jLabel1.setLabelFor(cryptoImplsTextArea);
        jLabel1.setText(NbBundle.getMessage(CryptographicServicesTopComponent.class, "LBL_CryptoImpls"));

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, jSeparator1, GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(serviceTypesLabel)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(servicesTypesComboBox, 0, 94, Short.MAX_VALUE))
                    .add(jLabel1)
                    .add(GroupLayout.TRAILING, cryptoImplsScrollPane, GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(serviceTypesLabel)
                    .add(servicesTypesComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jLabel1)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(cryptoImplsScrollPane, GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void cryptoImplsKeyPressedHandler(KeyEvent evt) {//GEN-FIRST:event_cryptoImplsKeyPressedHandler

        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DELETE) {
            this.cryptoImplsTextArea.setText("");
        }

    }//GEN-LAST:event_cryptoImplsKeyPressedHandler
        
    private void servicesTypesComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_servicesTypesComboBoxActionPerformed
        final Object source = evt.getSource();
        if (source != null && source instanceof JComboBox) {
            final JComboBox jcb = (JComboBox) source;
            final Object si = jcb.getSelectedItem();
            if (si != null) {
                final String serviceType = si.toString();
                final String[] cryptoImpls = CryptographicServices.getCryptoImpls(serviceType);
                
                final StringBuffer sb = new StringBuffer();
                sb.append( NbBundle.getMessage( CryptographicServicesTopComponent.class, "cryptoImplsHeader", serviceType ) );
                for (int i = 0; i < cryptoImpls.length; i++ ) {
                    final String cryptoImpl = cryptoImpls[i];
                    sb.append( NbBundle.getMessage( CryptographicServicesTopComponent.class, "cryptoImplsEntry", cryptoImpl ) );
                }
                sb.append( NbBundle.getMessage( CryptographicServicesTopComponent.class, "cryptoImplsFooter", serviceType ) );
                this.cryptoImplsTextArea.append( sb.toString() );
            }
        }
    }//GEN-LAST:event_servicesTypesComboBoxActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane cryptoImplsScrollPane;
    private JTextArea cryptoImplsTextArea;
    private JLabel jLabel1;
    private JSeparator jSeparator1;
    private JLabel serviceTypesLabel;
    private JComboBox servicesTypesComboBox;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized CryptographicServicesTopComponent getDefault() {
        if (instance == null) {
            instance = new CryptographicServicesTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the CryptographicServicesTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized CryptographicServicesTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find CryptographicServices component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof CryptographicServicesTopComponent) {
            return (CryptographicServicesTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return CryptographicServicesTopComponent.getDefault();
        }
    }
    
}
