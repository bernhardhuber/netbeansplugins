/*
 * CpdPanel.java
 *
 * Created on 21. April 2007, 22:28
 */

package org.huberb.cpd.options;

import java.awt.event.ItemEvent;
import net.sourceforge.pmd.cpd.LanguageFactory;

/**
 *
 * @author  HuberB1
 */
public class CpdPanel extends javax.swing.JPanel {
    private final CpdOptionsPanelController controller;
    
    /** Creates new form CpdPanel */
    public CpdPanel(CpdOptionsPanelController controller) {
        this.controller = controller;
        
        initComponents();
        
        this.languageComboBox.setModel( ModelFactory.createLanguageComboBoxModel() );        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rendererButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        languageLabel = new javax.swing.JLabel();
        languageComboBox = new javax.swing.JComboBox();
        recursivlyCheckBox = new javax.swing.JCheckBox();
        minimalTokenCountLabel = new javax.swing.JLabel();
        minimalTokenCountSpinner = new javax.swing.JSpinner();
        ignoreIdentifiersCheckBox = new javax.swing.JCheckBox();
        ignoreLiteralsCheckBox = new javax.swing.JCheckBox();
        languageExtensionTextField = new javax.swing.JTextField();
        languageExtensionLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        textRendererRadioButton = new javax.swing.JRadioButton();
        csvRendererRadioButton = new javax.swing.JRadioButton();
        xmlRendererRadioButton = new javax.swing.JRadioButton();
        rendererLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(languageLabel, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.languageLabel.text")); // NOI18N

        languageComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                handleLanguageItemChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(recursivlyCheckBox, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.recursivlyCheckBox.text")); // NOI18N
        recursivlyCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        recursivlyCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(minimalTokenCountLabel, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.minimalTokenCountLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ignoreIdentifiersCheckBox, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.ignoreIdentifiersCheckBox.text")); // NOI18N
        ignoreIdentifiersCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ignoreIdentifiersCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(ignoreLiteralsCheckBox, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.ignoreLiteralsCheckBox.text")); // NOI18N
        ignoreLiteralsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ignoreLiteralsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        languageExtensionTextField.setText(org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.languageExtensionTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(languageExtensionLabel, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.languageExtensionLabel.text")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, minimalTokenCountLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, languageLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(minimalTokenCountSpinner)
                    .add(languageComboBox, 0, 86, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(languageExtensionLabel)
                .add(4, 4, 4)
                .add(languageExtensionTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(recursivlyCheckBox))
            .add(jPanel1Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(ignoreIdentifiersCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ignoreLiteralsCheckBox))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(recursivlyCheckBox)
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(minimalTokenCountLabel)
                    .add(minimalTokenCountSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(languageLabel)
                    .add(languageComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(languageExtensionLabel)
                    .add(languageExtensionTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ignoreIdentifiersCheckBox)
                    .add(ignoreLiteralsCheckBox))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.jPanel2.border.title"))); // NOI18N

        rendererButtonGroup.add(textRendererRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(textRendererRadioButton, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.textRendererRadioButton.text")); // NOI18N
        textRendererRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        textRendererRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        rendererButtonGroup.add(csvRendererRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(csvRendererRadioButton, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.csvRendererRadioButton.text")); // NOI18N
        csvRendererRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        csvRendererRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        rendererButtonGroup.add(xmlRendererRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(xmlRendererRadioButton, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.xmlRendererRadioButton.text")); // NOI18N
        xmlRendererRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        xmlRendererRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(rendererLabel, org.openide.util.NbBundle.getMessage(CpdPanel.class, "CpdPanel.rendererLabel.text")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(rendererLabel)
                .add(14, 14, 14)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(csvRendererRadioButton)
                    .add(xmlRendererRadioButton)
                    .add(textRendererRadioButton))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textRendererRadioButton)
                    .add(rendererLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(csvRendererRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(xmlRendererRadioButton)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void handleLanguageItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_handleLanguageItemChanged

        // Enabled / Disable the languageExtensionTextField
        String item = (String)evt.getItem();
        boolean selected = evt.getStateChange() == ItemEvent.SELECTED;
        if (LanguageFactory.BY_EXTENSION.equals(item)) {
            this.languageExtensionTextField.setEnabled(selected);
        } else {
            this.languageExtensionTextField.setEnabled(false);
        }
    }//GEN-LAST:event_handleLanguageItemChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton csvRendererRadioButton;
    private javax.swing.JCheckBox ignoreIdentifiersCheckBox;
    private javax.swing.JCheckBox ignoreLiteralsCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox languageComboBox;
    private javax.swing.JLabel languageExtensionLabel;
    private javax.swing.JTextField languageExtensionTextField;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JLabel minimalTokenCountLabel;
    private javax.swing.JSpinner minimalTokenCountSpinner;
    private javax.swing.JCheckBox recursivlyCheckBox;
    private javax.swing.ButtonGroup rendererButtonGroup;
    private javax.swing.JLabel rendererLabel;
    private javax.swing.JRadioButton textRendererRadioButton;
    private javax.swing.JRadioButton xmlRendererRadioButton;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Read settings from CpdSettings and update GUI
     */
    void load() {
        // Read settings and initialize GUI
        CpdSettings cpdSettings = CpdSettings.getDefault();
        
        //---
        this.recursivlyCheckBox.setSelected( cpdSettings.getRecursivly() );
        this.minimalTokenCountSpinner.setValue( cpdSettings.getMinimalTokenCount() );
        this.languageComboBox.setSelectedItem( cpdSettings.getLanguage() );
        this.languageExtensionTextField.setText( cpdSettings.getLanguageExt() );
        this.ignoreIdentifiersCheckBox.setSelected( cpdSettings.getIgnoreIdentifiers() );
        this.ignoreLiteralsCheckBox.setSelected( cpdSettings.getIgnoreLiterals() );
        
        // todo make ignore*CheckBox only selectable if language == java
        
        //---
        this.textRendererRadioButton.setSelected( cpdSettings.getRendererEnum() == CpdSettings.RendererEnum.Text );
        this.csvRendererRadioButton.setSelected( cpdSettings.getRendererEnum() == CpdSettings.RendererEnum.Csv);
        this.xmlRendererRadioButton.setSelected( cpdSettings.getRendererEnum() == CpdSettings.RendererEnum.Xml );
    }
    
    /**
     * Read settings GUI, and update CpdSettings
     */
    void store() {
        // Store modified settings
        CpdSettings cpdSettings = CpdSettings.getDefault();
        
        //---
        cpdSettings.setRecursivly( this.recursivlyCheckBox.isSelected() );
        cpdSettings.setMinimalTokenCount( (Integer)this.minimalTokenCountSpinner.getValue() );
        cpdSettings.setLanguage( (String)this.languageComboBox.getSelectedItem() );
        cpdSettings.setLanguageExt( this.languageExtensionTextField.getText() );
        if (cpdSettings.getLanguage().equals( LanguageFactory.JAVA_KEY) ) {
            cpdSettings.setIgnoreIdentifiers( this.ignoreIdentifiersCheckBox.isSelected() );
            cpdSettings.setIgnoreLiterals( this.ignoreLiteralsCheckBox.isSelected() );
        } else {
            cpdSettings.setIgnoreIdentifiers(false);
            cpdSettings.setIgnoreLiterals(false);
        }
        
        //---
        CpdSettings.RendererEnum rendererEnum;
        if (this.textRendererRadioButton.isSelected()) {
            rendererEnum = CpdSettings.RendererEnum.Text;
        } else if (this.csvRendererRadioButton.isSelected()) {
            rendererEnum = CpdSettings.RendererEnum.Csv;
        } else if (this.xmlRendererRadioButton.isSelected()) {
            rendererEnum = CpdSettings.RendererEnum.Xml;
        } else {
            rendererEnum = CpdSettings.RendererEnum.Text;
        }
        cpdSettings.setRendererEnum(rendererEnum);
    }

    boolean valid() {
        return true;
    }
    
}
